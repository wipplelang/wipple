[[no-std]]

use "./util.wpl"
use "./output.wpl"
use "./fp.wpl"
use "./mutable.wpl"

[help "Retrieve the first item inside a `List`, if it exists."]
first :: A => List A -> Maybe A
first : list -> external "builtin" "list-first" list

[help "Retrieve the last item inside a `List`, if it exists."]
last :: A => List A -> Maybe A
last : list -> external "builtin" "list-last" list

[help "Retrieve all but the last item inside a `List`."]
initial :: A => List A -> List A
initial : list -> external "builtin" "list-initial" list

[help "Retrieve all but the first item inside a `List`."]
tail :: A => List A -> List A
tail : list -> external "builtin" "list-tail" list

Index-Error : type

instance Show Index-Error : just "invalid index"

[help "Retrieve the value in a `List` at a particular index, if it exists."]
at :: A => Number -> List A -> Result A Index-Error
at : index -> list -> external "builtin" "list-at" list index

[help "Add a new item to the end of a `List`."]
append :: A => A -> List A -> List A
append : new -> list -> external "builtin" "list-append" list new

[help "Add a new item to the end of a `Mutable List`."]
append! :: A => A -> Mutable (List A) -> ()
append! : new -> list -> list . set! (list . get . append new)

[help "Insert a new item at a particular index inside a `List`."]
insert :: A => Number -> A -> List A -> Result (List A) Index-Error
insert : index -> new -> list -> external "builtin" "list-insert" list index new

[help "Insert a new item at a particular index inside a `Mutable List`."]
insert! :: A => Number -> A -> Mutable (List A) -> Result () Index-Error
insert! : index -> new -> list -> {
	new-list : try (list . get . insert index new)
	list . set! new-list
	OK ()
}

[help "Remove the item at a particular index inside a `List`."]
remove :: A => Number -> List A -> Result (List A) Index-Error
remove : index -> list -> external "builtin" "list-remove" list index

[help "Remove the item at a particular index inside a `Mutable List`."]
remove! :: A => Number -> Mutable (List A) -> Result () Index-Error
remove! : index -> list -> {
	new-list : try (list . get . remove index)
	list . set! new-list
	OK ()
}
