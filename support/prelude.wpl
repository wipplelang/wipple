-- Functional programming --

it :: A => A -> A
it : x -> x

just :: A B => A -> B -> A
just : x -> _ -> x

. : dot operator (x f ~> f x)

-- Logic --

Boolean : type {
	True
	False
}

use Boolean

if : bool then else ~> when bool {
	True -> then
	False -> else
}

not :: Boolean -> Boolean
not : bool -> if bool False True

And : Left Right Output => trait (Left -> (() -> Right) -> Output)
and : conjunction operator (a b ~> And a (() -> b))
instance And Boolean Boolean Boolean : a? -> b? -> if a? (b? ()) False

Or : Left Right Output => trait (Left -> (() -> Right) -> Output)
or : disjunction operator (a b ~> Or a (() -> b))
instance Or Boolean Boolean Boolean : a? -> b? -> if a? True (b? ())

-- Utilities --

Default : A => trait A
instance Default Number : 0
instance Default Text : ""
instance Default Boolean : False

-- Math --

Add : Left Right Sum => trait (Left -> Right -> Sum)
+ : addition operator (a b ~> Add a b)
instance Add Number Number Number : a -> b -> external "builtin" "add" a b

Subtract : Left Right Difference => trait (Left -> Right -> Difference)
- : addition operator (a b ~> Subtract a b)
instance Subtract Number Number Number : a -> b -> external "builtin" "subtract" a b

Multiply : Left Right Product => trait (Left -> Right -> Product)
* : multiplication operator (a b ~> Multiply a b)
instance Multiply Number Number Number : a -> b -> external "builtin" "multiply" a b

Divide : Left Right Quotient => trait (Left -> Right -> Quotient)
/ : multiplication operator (a b ~> Divide a b)
instance Divide Number Number Number : a -> b -> external "builtin" "divide" a b

Power : Left Right Power => trait (Left -> Right -> Power)
^ : power operator (a b ~> Power a b)
instance Power Number Number Number : a -> b -> external "builtin" "power" a b

-- Output --

Show : A => trait (A -> Text)
instance Show Text : it
instance Show Number : n -> external "builtin" "number-to-text" n
instance Show Boolean : x? -> if x? "True" "False"

show :: A where (Show A) => A -> ()
show : x -> external "builtin" "show" (Show x)

instance Add Text Text Text : a -> b -> format "__" a b
