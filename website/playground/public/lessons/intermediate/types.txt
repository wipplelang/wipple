---
previous:
  name: Logic
  link: ?lesson=intermediate/logic
---

---
id: X8fvwv7g
type: text
locked: true
---

# Types

Wipple has a powerful system to detect bugs in your code, called the **type system**. The type system assigns every value in your program a **type**, which represents the "kind of thing" each value is.

Just like `:` is used to assign a name a value, the `::` symbol (pronounced _"is a"_) is used to assign a value a type. Here's a simple example:

---
id: 9C0MC2wR
type: code
lint: false
---

42 :: Number -- "42 is a Number"
"hello" :: Text -- "'hello' is a Text"

---
id: Wnu-SFH5
type: text
locked: true
---

Let’s see what happens if we make a mistake:

---
id: iFmWOhj8
type: code
---

42 :: Text

---
id: jYxGjc7u
type: text
locked: true
---

Take a look at the error and you should see *"expected `Text`, but found `Number`"*. Why? Well, we've told Wipple that `42` is supposed to be `Text`, but Wipple determined that `42` is a `Number`. Since these types don't match, Wipple issues an error.

We can extend this idea to functions, too! Watch what happens if we make a mistake:

---
id: NKCjkFjE
type: code
lint: false
---

increment : (a -> a + 1) :: (Number -> Number)
increment "2"

---
id: e4vdoSzv
type: text
locked: true
---

Wipple catches the bug and tells us that we're supposed to provide a `Number`!

What's the type of a function like `add` that accepts two inputs? Remember that `add` is really two functions, each accepting an input. This means `add` has the type `Number -> (Number -> Number)`!

To make it a bit clearer, you can write the name of the function on its own line above the variable, omitting the parentheses:

---
id: 43GqWoz5
type: code
---

add :: Number -> Number -> Number
add : a -> b -> a + b

---
id: 8j2J75UL
type: text
locked: true
---

Don't worry if this all sounds complicated — you usually don't even have to write the type of your variables! Wipple uses **type inference** to figure out what the types are for you. For example, let's say we have a function named `greet`:

---
id: txg7Oi9A
type: code
---

greet : name -> format "Hello, _!" name
greeting : greet "world"
show greeting

---
id: xeNcxT2r
type: text
locked: true
---

Try hovering over `greet`. You'll see that Wipple was able to determine its type is `Text -> Text` based on its usage!

One last note — what's the type of `show greeting`? `show` accepts `Text`, sure, but it doesn't produce any result. Wipple has a special type for functions that produce no result: the empty list `()`. So the type of `show greeting` is `()`! If you aren't convinced, try assigning `show greeting` to a variable, `result`, and hovering over it.

On the next page, we’ll take an even deeper dive into types!
