---
id: qlcImH80
type: text
locked: true
---

# How to use `collect`

`collect` takes a sequence and stores each value produced into a container. Usually, `collect` is the last function called in a sequence chain:

---
id: 1IKjyRPC
type: code
lint: false
---

numbers : (1 , 2 , 3) . transform (Add 1) . collect :: List _

---
id: YzKqY2UQ
type: text
locked: true
---

If you assign the result of `collect` to a variable, you usually need to annotate the type to indicate what kind of container to collect into. The type of the element, however, can usually be inferred using `_`, as shown above.

`collect` uses the `From-Sequence` trait, which you can implement for your own types:

---
id: b2Qbp223
type: code
---

[help "A container for storing the sum of a collection of numbers."]
Sum : type { sum :: Number }

instance (Default Sum) : Sum { sum : 0 }

instance (From-Sequence Number Sum) : reduce Default (next { sum } -> Sum { sum : sum + next })

{ sum } : (1 , 2 , 3) . collect :: Sum
show sum
