[[help-url "https://wipple.dev/doc/physics.html"]]

Physics : type {
  handle :: UI
  time :: Mutable Time
  objects :: Mutable (List Object)
  timers :: Mutable (List (Trigger ; (() -> ())))
}

Trigger : type {
  start-time :: Time
  end-time :: Time
}

instance (As Time Trigger) : t -> Trigger {
  start-time : t
  end-time : t
}

instance (As (Range Time) Trigger) : { min max } -> Trigger {
  start-time : min
  end-time : max
}

[context]
physics :: Physics
physics : error "use of physics handle outside `with-physics`"

[help "Create a new physics demonstration."]
[help-group "Physics"]
with-physics : syntax {
  with-physics 'body -> {
    with-ui "/playground/ui/physics/index.js" (handle -> {
      time : mutable (0 seconds)
      objects : mutable Default
      timers : mutable Default
      with (physics : Physics { handle time objects timers }) 'body
    })
  }
}

[help "An duration in seconds."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value seconds)]
Time : type { seconds :: Number }

instance (Equal Time) : b a -> (seconds of a) = (seconds of b)
instance (Order Time) : b a -> (seconds of a) . Order (seconds of b)
instance (Show Time) : { seconds } -> "_ s" seconds

[help "Specify a duration in seconds."]
[help-group "Physics"]
seconds :: Number -> Time
seconds : seconds -> Time { seconds }

[help "A distance in meters."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value meters)]
Distance : type { meters :: Number }

instance (Equal Distance) : b a -> (meters of a) = (meters of b)
instance (Order Distance) : b a -> (meters of a) . Order (meters of b)
instance (Show Distance) : { meters } -> "_ m" meters

[help "Specify a distance in meters."]
[help-group "Physics"]
meters :: Number -> Distance
meters : meters -> Distance { meters }

[help "A velocity in meters per second."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value (meters / seconds))]
Velocity : type { meters-per-second :: Number }

instance (Equal Velocity) : b a -> (meters-per-second of a) = (meters-per-second of b)
instance (Order Velocity) : b a -> (meters-per-second of a) . Order (meters-per-second of b)
instance (Show Velocity) : { meters-per-second } -> "_ m/s" meters-per-second

[help "An acceleration in meters per second, per second."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value (meters / seconds / seconds))]
Acceleration : type { meters-per-second-per-second :: Number }

instance (Equal Acceleration) : b a -> (meters-per-second-per-second of a) = (meters-per-second-per-second of b)
instance (Order Acceleration) : b a -> (meters-per-second-per-second of a) . Order (meters-per-second-per-second of b)
instance (Show Acceleration) : { meters-per-second-per-second } -> "_ m/s/s" meters-per-second-per-second

[help "A mass in kilograms."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value kilograms)]
Mass : type { kilograms :: Number }

instance (Equal Mass) : b a -> (kilograms of a) = (kilograms of b)
instance (Order Mass) : b a -> (kilograms of a) . Order (kilograms of b)
instance (Show Mass) : { kilograms } -> "_ kg" kilograms

[help "Specify a mass in kilograms."]
[help-group "Physics"]
kilograms :: Number -> Mass
kilograms : kilograms -> Mass { kilograms }

[help "A very large mass, making the object immovable. Use this instead of setting a large mass yourself to prevent glitches in the demonstration."]
[help-group "Physics"]
static :: Mass
static : undefined . kilograms

[help "A force in kilograms per unit of acceleration."]
[help-group "Physics"]
[sealed]
[help-convert-from Number ('value (kilograms / meters / seconds / seconds))]
Force : type { kilograms-per-meter-per-second-per-second :: Number }

instance (Equal Force) : b a -> (kilograms-per-meter-per-second-per-second of a) = (kilograms-per-meter-per-second-per-second of b)
instance (Order Force) : b a -> (kilograms-per-meter-per-second-per-second of a) . Order (kilograms-per-meter-per-second-per-second of b)
instance (Show Force) : { kilograms-per-meter-per-second-per-second } -> "_ kg*m/s/s" kilograms-per-meter-per-second-per-second

instance (Add Time Time Time) : b a -> Time { seconds : (seconds of a) + (seconds of b) }
instance (Subtract Time Time Time) : b a -> Time { seconds : (seconds of a) - (seconds of b) }
instance (Multiply Time Number Time) : c time -> Time { seconds : (seconds of time) * c }
instance (Multiply Number Time Time) : time c -> Time { seconds : (seconds of time) * c }

instance (Add Distance Distance Distance) : b a -> Distance { meters : (meters of a) + (meters of b) }
instance (Subtract Distance Distance Distance) : b a -> Distance { meters : (meters of a) - (meters of b) }
instance (Multiply Distance Number Distance) : c distance -> Distance { meters : (meters of distance) * c }
instance (Multiply Number Distance Distance) : distance c -> Distance { meters : (meters of distance) * c }

instance (Add Velocity Velocity Velocity) : b a -> Velocity { meters-per-second : (meters-per-second of a) + (meters-per-second of b) }
instance (Subtract Velocity Velocity Velocity) : b a -> Velocity { meters-per-second : (meters-per-second of a) - (meters-per-second of b) }
instance (Multiply Velocity Number Velocity) : c velocity -> Velocity { meters-per-second : (meters-per-second of velocity) * c }
instance (Multiply Number Velocity Velocity) : velocity c -> Velocity { meters-per-second : (meters-per-second of velocity) * c }
instance (Multiply Velocity Time Distance) : time velocity -> Distance { meters : (meters-per-second of velocity) * (seconds of time) }
instance (Multiply Time Velocity Distance) : velocity time -> Distance { meters : (meters-per-second of velocity) * (seconds of time) }
instance (Divide Distance Time Velocity) : time distance -> Velocity { meters-per-second : (meters of distance) / (seconds of time) }
instance (Divide (Number -> Distance) (Number -> Time) (Number -> Velocity)) : _ _ meters-per-second -> Velocity { meters-per-second }

instance (Add Acceleration Acceleration Acceleration) : b a ->
  Acceleration { meters-per-second-per-second : (meters-per-second-per-second of a) + (meters-per-second-per-second of b) }
instance (Subtract Acceleration Acceleration Acceleration) : b a ->
  Acceleration { meters-per-second-per-second : (meters-per-second-per-second of a) - (meters-per-second-per-second of b) }
instance (Multiply Acceleration Number Acceleration) : c acceleration ->
  Acceleration { meters-per-second-per-second : (meters-per-second-per-second of acceleration) * c }
instance (Multiply Number Acceleration Acceleration) : acceleration c ->
  Acceleration { meters-per-second-per-second : (meters-per-second-per-second of acceleration) * c }
instance (Multiply Acceleration Time Velocity) : time acceleration ->
  Velocity { meters-per-second : (meters-per-second-per-second of acceleration) * (seconds of time) }
instance (Multiply Time Acceleration Velocity) : acceleration time ->
  Velocity { meters-per-second : (meters-per-second-per-second of acceleration) * (seconds of time) }
instance (Divide Velocity Time Acceleration) : time velocity ->
  Acceleration { meters-per-second-per-second : (meters-per-second of velocity) / (seconds of time) }
instance (Divide (Number -> Velocity) (Number -> Time) (Number -> Acceleration)) : _ _ meters-per-second-per-second ->
  Acceleration { meters-per-second-per-second }

instance (Multiply Force Number Force) : c force ->
  Force { kilograms-per-meter-per-second-per-second : (kilograms-per-meter-per-second-per-second of force) * c }
instance (Multiply Number Force Force) : force c ->
  Force { kilograms-per-meter-per-second-per-second : (kilograms-per-meter-per-second-per-second of force) * c }
instance (Divide Force Mass Acceleration) : mass force ->
  Acceleration { meters-per-second-per-second : (kilograms-per-meter-per-second-per-second of force) / (kilograms of mass) }
instance (Multiply Mass Acceleration Force) : acceleration mass ->
  Force { kilograms-per-meter-per-second-per-second : (kilograms of mass) * (meters-per-second-per-second of acceleration) }
instance (Multiply Acceleration Mass Force) : mass acceleration ->
  Force { kilograms-per-meter-per-second-per-second : (kilograms of mass) * (meters-per-second-per-second of acceleration) }
instance (Multiply (Number -> Mass) (Number -> Acceleration) (Number -> Force)) : _ _ kilograms-per-meter-per-second-per-second ->
  Force { kilograms-per-meter-per-second-per-second }

[private]
clock :: () -> Time
clock : () -> Time { seconds : handle of physics . message "clock" () }

[private]
within-bounds-threshold :: Number
within-bounds-threshold : 1

[private]
within-bounds? :: () -> Boolean
within-bounds? : () -> handle of physics . message "within-bounds" within-bounds-threshold

time :: () -> Time
time : () -> get (time of physics)

[help "A direction represented as $x$ and $y$ components between 0 and 1. In addition to the preset directions like `top` and `center`, you can create a direction from an angle with `(x degrees) as Direction`."]
[help-group "Physics"]
Direction : type {
  x :: Number
  y :: Number
}

instance (As (Number ; Number) Direction) : (x ; y) -> Direction { x y }

instance (As (Angle Number) Direction) : angle -> Direction {
  x : cos angle
  y : sin angle
}

[help "A direction facing toward the top of the screen."]
[help-group "Physics"]
top :: Direction
top : (0 ; 1) as Direction

[help "A direction facing toward the top left of the screen."]
[help-group "Physics"]
top-left :: Direction
top-left : (-1 ; 1) as Direction

[help "A direction facing toward the top right of the screen."]
[help-group "Physics"]
top-right :: Direction
top-right : (1 ; 1) as Direction

[help "Alias for `top`."]
[help-group "Physics"]
up :: Direction
up : top

[help "No particular direction."]
[help-group "Physics"]
center :: Direction
center : (0 ; 0) as Direction

[help "A direction facing toward the left of the screen."]
[help-group "Physics"]
left :: Direction
left : (-1 ; 0) as Direction

[help "A direction facing toward the right of the screen."]
[help-group "Physics"]
right :: Direction
right : (1 ; 0) as Direction

[help "A direction facing toward the bottom of the screen."]
[help-group "Physics"]
bottom :: Direction
bottom : (0 ; -1) as Direction

[help "A direction facing toward the bottom left of the screen."]
[help-group "Physics"]
bottom-left :: Direction
bottom-left : (-1 ; -1) as Direction

[help "A direction facing toward the bottom right of the screen."]
[help-group "Physics"]
bottom-right :: Direction
bottom-right : (1 ; -1) as Direction

[help "Alias for `bottom`."]
[help-group "Physics"]
down :: Direction
down : bottom

instance (Default Direction) : center

[sealed]
Object : type {
  index :: Number
  x :: Time -> Distance
  y :: Time -> Distance
}

[private]
create-object :: Text -> Object-Config -> Object
create-object : shape config -> {
  initial-x : (x of config) (0 seconds)
  initial-y : (y of config) (0 seconds)

  handle : Object {
    index : handle of physics . message "create-object" (shape ; (color of config) ; (meters of width of config) ; (meters of height of config) ; (x of center of config) ; (y of center of config) ; (kilograms of mass of config) ; if (elastic of config) 1 0 ; if (rotates of config) 1 0 ; if (solid of config) 1 0 ; (meters of initial-x) ; (meters of initial-y))
    x : x of config
    y : y of config
  }

  objects of physics . append! handle

  handle
}

[private]
update-position :: Time -> Object -> ()
update-position : t { index x y } -> handle of physics . message "set-position" (index ; meters of (x t) ; meters of (y t))

force :: D where (As D Direction) => D -> Force -> Object -> ()
force : direction force { index } -> {
  direction : direction as Direction
  handle of physics . message "apply-force" (index ; (kilograms-per-meter-per-second-per-second of force) * (x of direction) ; (kilograms-per-meter-per-second-per-second of force) * (y of direction))
}

position-x :: Object -> Distance
position-x : { index } -> Distance { meters : handle of physics . message "position-x" index }

position-y :: Object -> Distance
position-y : { index } -> Distance { meters : handle of physics . message "position-y" index }

velocity-x :: Object -> Velocity
velocity-x : { index } -> Velocity { meters-per-second : handle of physics . message "velocity-x" index }

velocity-y :: Object -> Velocity
velocity-y : { index } -> Velocity { meters-per-second : handle of physics . message "velocity-y" index }

speed :: Object -> Velocity
speed : { index } -> Velocity { meters-per-second : handle of physics . message "speed" index }

force-x :: Object -> Force
force-x : { index } -> Force { kilograms-per-meter-per-second-per-second : handle of physics . message "force-x" index }

force-y :: Object -> Force
force-y : { index } -> Force { kilograms-per-meter-per-second-per-second : handle of physics . message "force-y" index }

Object-Config : type {
  color :: Text
  width :: Distance
  height :: Distance
  center :: Direction
  mass :: Mass
  elastic :: Boolean
  rotates :: Boolean
  solid :: Boolean
  x :: Time -> Distance
  y :: Time -> Distance
}

[help "Utility that returns the provided distance at `0 seconds`, but `undefined` otherwise. Useful for setting the initial position of an object and then allowing its position to be controlled by `force`."]
[help-group "Physics"]
initially :: Distance -> Time -> Distance
initially : distance { seconds } -> if (seconds = 0) distance (undefined . meters)

instance (Default Object-Config) : Object-Config {
  color : ""
  width : 1 meters
  height : 1 meters
  center : Default
  mass : 1 kilograms
  elastic : False
  rotates : False
  solid : False
  x : just (undefined meters)
  y : just (undefined meters)
}

[help "Create a box on the screen with the specified properties."]
[help-group "Physics"]
box : syntax {
  box 'config -> create-object "box" ((Default :: Object-Config) where 'config)
}

[help "Set the acceleration due to gravity."]
[help-group "Physics"]
gravity :: Direction -> Acceleration -> ()
gravity : direction acceleration -> handle of physics . message "set-gravity" ((meters-per-second-per-second of acceleration) * (x of direction) ; (meters-per-second-per-second of acceleration) * (y of direction))

[help "Perform an action when the simulation reaches the specified time."]
[help-group "Physics"]
at : syntax {
  at 'time 'action -> {
    _ : (timers of physics) . insert-at! 0 ('time as Trigger ; (() -> 'action))
  }
}

[entrypoint]
entrypoint :: Entrypoint
entrypoint : program -> with-physics {
  program ()

  repeat (while (within-bounds? ())) {
    t : clock ()
    (time of physics) . set! t

    new-timers :
      get (timers of physics)
      . filter (({ start-time end-time } ; action) -> {
        if (t >= start-time) {
          action ()
        }

        t < end-time
      })
      . collect

    (timers of physics) . set! new-timers

    get (objects of physics) . each (update-position t)

    handle of physics . message "tick" ()
  }
}
