---
previous:
  name: Mutability
  link: ?lesson=advanced/mutability
next:
  name: Randomness
  link: ?lesson=advanced/randomness
---

---
id: D59jG68X
type: text
locked: true
---

# Lists and sequences

Often, you'll be writing programs that deal with a list of items instead of individual variables. Let's learn how to use lists in Wipple!

The easiest way to make a list is to use the `list` function:

---
id: 6P-2w8Bt
type: code
lint: false
---

my-list : list 1 2 3

---
id: 7JdtiXqa
type: text
locked: true
---

All of the items in a list must be the same type. If you need to have elements of different types, you can wrap them in a custom type like so:

---
id: 3X2XUCEJ
type: code
lint: false
---

Item : type {
    Number-Item Number
    Text-Item Text
}

my-list : list (Number-Item 1) (Text-Item "hi")

---
id: 3MSl65z5
type: text
locked: true
---

You can get the items back out of a list in many ways. For example, `first` retrieves the first item in the list, and `last` retrieves the last item:

---
id: 30ExR_Iz
type: code
---

my-list : list 1 2 3
show (my-list . first)
show (my-list . last)

---
id: sLFgXM80
type: text
locked: true
---

You can use `nth` to get the item at a particular index (starting from zero):

---
id: EooHA7AL
type: code
---

my-list : list 1 2 3
show (my-list . nth 1)

---
id: gAY1ykQL
type: text
locked: true
---

## Sequences

A **sequence** is anything that produces values on demand. Wipple provides several functions that let you transform one sequence into another. These functions either take an sequence or produce one, or both! Lists are one kind of sequence (producing each item inside the list in order), but there are many others.

`each` takes a sequence and calls a function for each item in the sequence:

---
id: 3lCsKd0y
type: code
---

my-list : list 1 2 3
my-list . each show

---
id: U1NgwDaV
type: text
locked: true
---

`transform` produces a sequence that transforms the contents of the provided sequence. `transform` is useful for converting a list of one type into a list of a different type:

---
id: LrQCJfCG
type: code
---

Person : type {
    name :: Text
    age :: Number
}

alice : Person {
    name : "Alice"
    age : 25
}

bob : Person {
    name : "Bob"
    age : 30
}

charlie : Person {
    name : "Charlie"
    age : 35
}

people : list alice bob charlie

names : people . transform (person -> name of person)
names . each show

---
id: DnTJhS3S
type: text
locked: true
---

`filter` takes a sequence and only produces the items that satisfy the condition:

---
id: YOP73aZQ
type: code
---

languages : list "C" "Python" "Java" "JavaScript" "Wipple"

short-names : languages . filter (name -> count name < 5)
short-names . each show

---
id: h3O5wju3
type: text
locked: true
---

You can make your own sequences by implementing the `As-Sequence` trait:

---
id: lYZGLYeA
type: code
---

Counter : type {
    min :: Natural
    max :: Natural
}

instance (As-Sequence Counter Natural) : counter -> {
    count : mutable (min of counter)

    sequence {
        n : get count
        if (n = (max of counter)) {
            None
        } {
            increment! count
            Some n
        }
    }
}

count :: Natural -> Natural -> Counter
count : min max -> Counter { min max }

count 0 10 . each show
