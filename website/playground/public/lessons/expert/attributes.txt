---
previous:
  name: Scope
  link: ?lesson=expert/scope
next:
  name: Specialization
  link: ?lesson=expert/specialization
---

---
id: oZaavWSx
type: text
locked: true
---

# Attributes

Each one of Wipple's constructs (types, traits, constants, instances, etc.) have their own default behavior. But sometimes you need to express something more complicated that overrides this behavior. Wipple offers several **attributes** that allow you to do this!

Attributes are written in square brackets (`[` and `]`) above a declaration. For example, the `help` attribute allows you to write documentation for your function:

---
id: 0kzKyyX6
type: code
---

[help "Adds two numbers together."]
add :: Number -> Number -> Number
add : a b -> a + b

---
id: NCj3rHBU
type: text
locked: true
---

In the above code box, click on the + symbol on the right and scroll down, and you'll find your `add` function listed! You can use the `help-group` attribute to assign `add` to a particular category in the list.

Another useful attribute is `on-unimplemented`, which lets you customize the error message when Wipple can't find an instance for a trait:

---
id: 71wV8NJm
type: code
---

Carnivore : type
Herbivore : type
Omnivore : type

Animals : type
Plants : type

[on-unimplemented ("_ does not eat _" Animal Food)]
Eat : Animal Food => trait (Animal , Food)

instance (Eat Carnivore Animals) : ...
instance (Eat Herbivore Plants) : ...
instance (Eat Omnivore Animals) : ...
instance (Eat Omnivore Plants) : ...

(Eat) :: Carnivore , Plants

---
id: kRSFMDL_
type: text
locked: true
---

We'll learn another attribute, `specialize`, in the next lesson!
