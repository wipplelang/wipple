[[no-std]]

use "fp.wpl"
use "logic.wpl"

[help "Retrieve a field from a structure value without introducing a new variable into scope."]
of : accessor operator (field value ~> {
	{ field } : value
	field
})

[help "Crash the program with the provided message."]
crash :: Text -> _
crash : message -> external "runtime" "crash" message

[help "Indicates unfinished code. Crashes the program upon evaluation."]
... :: _
... : crash "not yet implemented"

[help "Represents the presence or absence of a value."]
[on-mismatch Value "try handling the case where the `Maybe` is `None`, eg. using `when`, `try` or `expect`"]
Maybe : Value => type {
	None
	Some Value
}

use Maybe

A B => instance (Map A B (Maybe A) (Maybe B)) : f -> m -> when m {
	Some x -> Some (f x)
	None -> None
}

[help "Represents the success or failure of an operation."]
[on-mismatch Success "try handling the case where the `Result` is `Error`, eg. using `when`, `try` or `expect`"]
[on-mismatch Failure "try converting the error to the correct type, eg. using `as` or `try`"]
Result : Success Failure => type {
	OK Success
	Error Failure
}

use Result

A B Failure => instance (Map A B (Result A Failure) (Result B Failure)) : f -> r -> when r {
	OK x -> OK (f x)
	Error e -> Error e
}

[help "Implement this trait to enable usage of your type in error handling."]
Try : Value Success Failure => trait (Value -> Result Success Failure)

[help "Represents the failure to find a value inside a `Maybe`."]
None-Error : type

Expect : Container Value => trait (Text -> Container -> Value)

Value => instance (Expect (Maybe Value) Value) : message -> x? -> when x? {
	Some x -> x
	None -> crash message
}

Unwrap-Message : Container => trait (Container -> Text)

Value => instance (Unwrap-Message (Maybe Value)) :
	just "called `unwrap` on `None`"

Success Failure => instance (Unwrap-Message (Result Success Failure)) :
	just "called `unwrap` on `Error`"

[help "Produces the `Some` value contained within a `Maybe`, or crashes the program with the provided message."]
expect :: Container Value where (Expect Container Value) =>
	Text -> Container -> Value
expect : Expect

[help "Produces the `Some` value contained within a `Maybe`, or crashes the program."]
unwrap :: Container Value
	where (Expect Container Value) (Unwrap-Message Container) =>
	Container -> Value
unwrap : x? -> expect (Unwrap-Message x?) x?

As : Input Output => trait (Input -> Output)
as : cast operator (x t ~> (As x :: t))
A => instance (As A A) : it

As? : Input Output => trait (Input -> Maybe Output)
as? : cast operator (x t ~> (As? x :: Maybe t))
A => instance (As? A A) : Some

[help "Represents the default or initial value of a type."]
Default : A => trait A
instance (Default Number) : 0
instance (Default Text) : ""
instance (Default Boolean) : False
A => instance (Default (Maybe A)) : None
