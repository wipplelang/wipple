Number : type intrinsic
intrinsic "type" "number" : Number

Text : type intrinsic
intrinsic "type" "text" : Text

Maybe : Value => type {
    None
    Some Value
}

intrinsic "type" "maybe" : Maybe
intrinsic "constant" "none" : None
intrinsic "constant" "some" : Some

As : Input Output => trait (Input -> Output)
intrinsic "trait" "as" : As

Input Output where (Error ("cannot convert a _ into _" Input Output)) =>
    default instance (As Input Output) : ...

Value => instance (As Value Value) : value -> value

error :: (Value : ()) => Text -> Value
error : message -> intrinsic "crash" message

... :: Value => Value
... : error "not implemented"

assert :: Text -> Boolean -> ()
assert : message -> condition -> if condition {} {error message}

unreachable :: Value => Value
unreachable : error "unreachable"

-- Represents the default or initial value of a type.
Empty : Value => trait Value

Value where (Error ("_ has no empty value" Value)) =>
    default instance (Empty Value) : ...

instance (Empty Number) : 0
instance (Empty Text) : ""
instance (Empty Boolean) : False
Value => instance (Empty (Maybe Value)) : None

-- Send a message to the runtime.
runtime-message :: Input (Output : ()) => Text Input -> Output
runtime-message : message data -> intrinsic "runtime-message" message data

-- Used to ensure that the block provided to `once` is returning a value meant
-- to be initialized once.
Once : Value => trait ()

-- Executes the provided block exactly once. If `once` has already been called
-- for `Value`, returns the existing value. When the program exits, `once` calls
-- the provided function so you can clean up any resources used.
once :: Value where (Once Value) => {Value} (Value -> ()) -> Value
once : block cleanup -> intrinsic "once" block cleanup

-- Generate a compile-time error with the provided information. You may provide
-- a single message, or a tuple with multiple pieces of information. Valid types
-- for this tuple include text, `Error-Fix`, and `Error-Location`.
--
-- ## Example
--
-- ```wipple
-- -- Display "cannot multiply two pieces of text" rather than
-- -- "this code requires `(Multiply Text Text)`"
-- (infer Output) where (Error "cannot multiply two pieces of text") =>
--   instance (Multiply Text Text Output) : unreachable
-- ```
Error : Info => trait intrinsic
Info => instance (Error Info) : unreachable
intrinsic "trait" "error" : Error

-- Change the location of a compile-time error generated by the `Error` trait.
-- `Type` should be a type parameter â€” the error will have the location of the
-- first expression with this type.
Error-Location : Type => type intrinsic
intrinsic "type" "error-location" : Error-Location

-- Suggest a fix to the user when generating a compile-time error with the
-- `Error` trait. `Message` and `Code` should both be text.
Error-Fix : Message Code => type intrinsic
intrinsic "type" "error-fix" : Error-Fix

-- When used in an instance, always displays at the location of the value that
-- requested the instance. This can be used with `Error-Location`, as well as
-- `Error-Fix` to insert the source code in the fix.
Source : type intrinsic
intrinsic "type" "source" : Source

-- Whenever two types are incompatible, the compiler will resolve this trait
-- to display a custom error message generated by `Error`. You can define
-- instances of `Mismatch` to provide custom error messages when your type is
-- expected, but the code provides a value of a different type. (If no instance
-- matches, the compiler will display a default error message.) This trait is
-- useful when you have two concrete types that mismatch, since without type
-- parameters you don't have access to location information.
--
-- ## Example
--
-- ```wipple
-- () where (Error "expected unit for distance") =>
--   instance (Mismatch Distance Number) : ...
-- ```
Mismatch : Actual Expected => trait intrinsic
intrinsic "trait" "mismatch" : Mismatch

-- Provide a text description of a type for use in error messages.
Describe-Type : Type (infer Description) => trait intrinsic
intrinsic "trait" "describe-type" : Describe-Type

instance (Describe-Type Number "a number") : ...
instance (Describe-Type Text "a piece of text") : ...
Input Output => default instance (Describe-Type (Input -> Output) "a function") : ...
Body => default instance (Describe-Type {Body} "a block") : ...

-- Change how a declaration is highlighted in the code editor. Currently, `Type`
-- must be a constant reference.
Highlight : Type (infer Options) => trait intrinsic
intrinsic "trait" "highlight" : Highlight

-- Set the highlight category when used with `Highlight`.
Highlight-Category : Color => type intrinsic
intrinsic "type" "highlight-category" : Highlight-Category

-- Set the highlight icon when used with `Highlight`.
Highlight-Icon : Icon => type intrinsic
intrinsic "type" "highlight-icon" : Highlight-Icon

-- Display a dropdown with the provided options. The dropdown will evaluate to
-- the selected item at runtime.
Dropdown :: Value => (List Value) Value -> Value
Dropdown : _ selection -> selection
