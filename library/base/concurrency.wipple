Task-Group : type
language "task-group" : Task-Group

[Wait for a function to be called before returning.]
[group : "Concurrency"]
with-continuation :: A => ((A -> ()) -> ()) -> A
with-continuation : callback -> intrinsic "with-continuation" callback

[Create a group of tasks to be executed at the same time. This function returns once all of the tasks have finished.]
[group : "Concurrency"]
with-task-group :: (Task-Group -> ()) -> ()
with-task-group : body -> intrinsic "with-task-group" body

[Run a task in a task group.]
[group : "Concurrency"]
task :: (lazy ()) -> Task-Group -> ()
task : body group -> intrinsic "task" group (() -> evaluate body)

[Execute code in the background without waiting for it to finish.]
[group : "Concurrency"]
in-background :: (lazy ()) -> ()
in-background : body -> intrinsic "in-background" (() -> evaluate body)

[TODO: Delay and duration units]
