-- Used by `repeat` to determine whether to continue running or stop with a value.
Control-Flow : State Result => type {
  Continue State
  Stop Result
}

-- Determines whether to evaluate a `repeat` body again.
Repeat-Predicate : State Body Result => trait (State -> Control-Flow (Body -> State) Result)

-- Repeat using the `Control-Flow` produced by the `repeat` body.
with-control-flow :: Result => With-Control-Flow Result
with-control-flow : {current : Continue ()}

With-Control-Flow : Result => type {current :: Control-Flow Unit Result}

Result => instance (Repeat-Predicate (With-Control-Flow Result) (Control-Flow () Result) Result) :
  {current : current} -> when current {
    Continue () -> Continue (new -> {current : new})
    Stop result -> Stop result
  }

Body Result where (Error "missing-repeat") =>
  instance (Mismatch (With-Control-Flow Result) ({Body} -> Result))

-- Repeat so long as the provided condition is `True`.
while :: {Boolean} -> While
while : condition -> {condition : condition}

While : type {condition :: {Boolean}}

(Body : ()) => instance (Repeat-Predicate While Body ()) : {condition : condition} ->
  if (do condition) {Continue (_ -> while condition)} {Stop ()}

(Body : ()) where (Error "missing-repeat") =>
  instance (Mismatch While ({Body} -> Unit))

-- Repeat forever.
forever :: Forever
forever : Forever

Forever : type

Body (Result : ()) => instance (Repeat-Predicate Forever Body Result) :
  _ -> Continue (_ -> Forever)

Body (Result : ()) where (Error "missing-repeat") =>
  instance (Mismatch Forever ({Body} -> Result))

Times : type Number

State Body Result where (Error ("expected-times-after-number" ; Error-Location State)) =>
  instance (Repeat-Predicate (State = Number) Body Result) : ...

(Body : ()) => instance (Repeat-Predicate Times Body ()) : (Times n) ->
  if (n > 0) {Continue (_ -> (n - 1) times)} {Stop ()}

-- Repeat a certain number of times.
@(highlight-category : "unit")
times :: Number -> Times
times : Times

Body where (Error "missing-repeat") =>
  instance (Mismatch Times ({Body} -> Unit))

-- Execute a block of code repeatedly.
--
-- ## Example
--
-- ```wipple
-- -- Displays "Hello, world" four times
-- repeat (4 times) {
--   show "Hello, world!"
-- }
-- ```
@(highlight-category : "control-flow")
@(highlight-icon : "repeat")
repeat :: State (infer Body) (infer Result) where (Repeat-Predicate State Body Result) => State {Body} -> Result
repeat : state body -> when (Repeat-Predicate state) {
  Continue next -> repeat (next (do body)) body
  Stop result -> result
}
