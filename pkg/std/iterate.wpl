[[no-std]]

use "./util.wpl"
use "./fp.wpl"
use "./mutable.wpl"
use "./list.wpl"

[help "A container for an iterable value that produces the `next` value on demand."]
Iterator : Element => type {
	next :: () -> Maybe Element
}

[help "Implement this trait to enable traversing your collection type."]
Iterate : Container Element => trait (Container -> Iterator Element)

Element => instance Iterate (Iterator Element) Element : it

-- reduce :: Container Element Result where (Iterate Container Element) => (Element -> Result -> Result) -> Container -> Iterator Result
-- reduce : TODO

-- TODO: Use higher-kinded types
[help "Keep only the items that satisfy the provided condition."]
filter :: Container Element where (Iterate Container Element) => (Element -> Boolean) -> Container -> Iterator Element
filter : include? -> container -> {
	{ next } : Iterate container

	Iterator {
		next : () -> loop {
			when (next ()) {
				Some x -> if (include? x) (break (Some x)) (continue)
				None -> break None
			}
		}
	}
}

-- TODO: Use higher-kinded types
[help "Execute a function for each item in an iterator."]
each :: Container Element where (Iterate Container Element) => (Element -> ()) -> Container -> ()
each : f -> container -> {
	{ next } : Iterate container

	loop {
		when (next ()) {
			Some x -> {
				f x
				continue
			}
			None -> break ()
		}
	}
}

-- TODO: Use higher-kinded types
[help "Implement this trait to enable reducing an iterator into your collection type."]
Collect : Element Container => trait (Iterator Element -> Container)

-- TODO: Use higher-kinded types
[help "Collect an iterator into a single value, like a `List`."]
collect :: Input Element Output where (Iterate Input Element) (Collect Element Output) => Input -> Output
collect : input -> Collect (Iterate input)

Element => instance Collect Element (List Element) : { next } -> {
	list : mutable (list ())
	loop {
		when (next ()) {
			Some x -> {
				list . append! x
				continue
			}
			None -> break ()
		}
	}

	get list
}

Element => instance Collect Text Text : { next } -> {
	text : mutable ""
	loop {
		when (next ()) {
			Some x -> {
				text . add! x
				continue
			}
			None -> break ()
		}
	}

	get text
}

A => instance Iterate (List A) A : list -> {
	index : mutable 0

	Iterator {
		next : () -> when (list . at (get index)) {
			OK element -> {
				increment! index
				Some element
			}
			Error _ -> None
		}
	}
}
