[[no-implicit-use]]

use "mutable"

Control-Flow : A => type {
  Break A
  Continue
}

[private]
repeat' :: (Result : ()) => (() -> Control-Flow Result) -> Result
repeat' : body -> when (body ()) {
  Continue -> repeat' body
  Break value -> value
}

[help "Used in `repeat` to specify when to stop repeating."]
[help-group "Control Flow"]
Repeat-Predicate : A (infer Result) => trait (A -> () -> Control-Flow Result)

[private]
repeat-with-predicate' :: P (infer Result) where (Repeat-Predicate P Result) => P -> (() -> ()) -> Result
repeat-with-predicate' : predicate -> {
  looper :: Result => ((() -> Control-Flow Result) , (() -> ())) -> Result
  looper : (next , body) -> when (next ()) {
    Continue -> {
      body ()
      looper (next , body)
    }
    Break value -> value
  }

  next : (Repeat-Predicate predicate)
  body -> looper (next , body)
}

instance (Repeat-Predicate (() -> Boolean) ()) : f () -> \
  if (f ()) Continue (Break ())

Forever : type
(Result : ()) => instance (Repeat-Predicate Forever Result) : _ () -> Continue

[help "Used in `repeat` to repeat forever."]
[help-group "Control Flow"]
forever :: Forever
forever : Forever

While : type { continue? :: () -> Boolean }
instance (Repeat-Predicate While ()) : { continue? } () -> \
  if (continue? ()) Continue (Break ())

[help "Used in `repeat` to repeat until the provided condition is `False`."]
[help-group "Control Flow"]
[help-template "(while {%condition%})"]
while : syntax { while 'p -> While { continue? : () -> 'p } }

[help "Used in `repeat` to repeat until the provided condition is `True`."]
[help-group "Control Flow"]
[help-template "(until {%condition%})"]
until : syntax { until 'p -> while (not 'p) }

Times : type { count :: Natural }
instance (Repeat-Predicate Times ()) : { count } -> {
  counter : mutable 0

  () -> {
    current : get counter
    increment! counter
    if (current < count) Continue (Break ())
  }
}

[help "Used in `repeat` to repeat a specified number of times."]
[help-group "Control Flow"]
[help-template "({%number%} times)"]
times : syntax { 'n times -> Times { count : 'n } }

[help "Execute code repeatedly."]
[help-group "Control Flow"]
[help-template "repeat {%predicate%} { {%body%} }"]
[keyword]
repeat : syntax {
  repeat 'predicate 'body -> repeat-with-predicate' 'predicate (() -> 'body)
  repeat 'body -> repeat' (() -> 'body)
}
