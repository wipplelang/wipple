-- Used by `repeat` to determine whether to continue running or stop with a value.
Control-Flow : State Result => type {
    Continue State
    Stop Result
}

-- Determines whether to evaluate a `repeat` body again.
Repeat-Predicate : State Body Result => trait (State -> Control-Flow (Body -> State) Result)

-- Repeat using the `Control-Flow` produced by the `repeat` body.
with-control-flow :: Result => With-Control-Flow Result
with-control-flow : {current : Continue ()}

With-Control-Flow : Result => type {current :: Control-Flow () Result}

Result => instance (Repeat-Predicate (With-Control-Flow Result) (Control-Flow () Result) Result) :
    {current : current} -> when current {
        Continue () -> Continue (new -> {current : new})
        Stop result -> Stop result
    }

Body Result where (Error ("missing `repeat` here" ; Error-Fix "add `repeat`" ("`repeat _`" Source))) =>
  instance (Mismatch (With-Control-Flow Result) ({Body} -> Result)) : ...

-- Repeat so long as the provided condition is `True`.
while :: {Boolean} -> While
while : condition -> {condition : condition}

While : type {condition :: {Boolean}}

(Body : ()) => instance (Repeat-Predicate While Body ()) : {condition : condition} ->
    if (do condition) {Continue (_ -> while condition)} {Stop ()}

(Body : ()) where (Error ("missing `repeat` here" ; Error-Fix "add `repeat`" ("`repeat _`" Source))) =>
  instance (Mismatch While ({Body} -> ())) : ...

-- Repeat forever.
forever :: Forever
forever : Forever

Forever : type

Body (Result : ()) => instance (Repeat-Predicate Forever Body Result) :
    _ -> Continue (_ -> Forever)

Body (Result : ()) where (Error ("missing `repeat` here" ; Error-Fix "add `repeat`" ("`repeat _`" Source))) =>
  instance (Mismatch Forever ({Body} -> Result)) : ...

Times : type {
    count :: Number
    current :: Number
}

(Body : ()) => instance (Repeat-Predicate Times Body ()) : {
    count : count
    current : current
} -> if (current < count) {
    Continue (_ -> {
        count : count
        current : current + 1
    })
} {
    Stop ()
}

-- Repeat a certain number of times.
times :: Number -> Times
times : count -> {
    count : count
    current : 0
}

Body where (Error ("missing `repeat` here" ; Error-Fix "add `repeat`" ("`repeat _`" Source))) =>
  instance (Mismatch Times ({Body} -> ())) : ...

-- Execute a block of code repeatedly.
--
-- ## Example
--
-- ```wipple
-- -- Displays "Hello, world" four times
-- repeat (4 times) {
--   show "Hello, world!"
-- }
-- ```
repeat :: State (infer Body) (infer Result) where (Repeat-Predicate State Body Result) => State {Body} -> Result
repeat : state body -> when (Repeat-Predicate state) {
    Continue next -> repeat (next (do body)) body
    Stop result -> result
}
