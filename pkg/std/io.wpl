[[no-std]]

use "fp.wpl"
use "list.wpl"
use "logic.wpl"
use "util.wpl"
use "iterate.wpl"

[language "show"]
[help "Implement this trait to enable `show`ing values of your type."]
Show : A => trait (A -> Text)

[help "Display a value on the screen."]
show :: A where (Show A) => A -> ()
show : x -> external "runtime" "display" (Show x)

instance (Show Text) : it
instance (Show Number) : n -> external "runtime" "number-to-text" n
instance (Show Integer) : n -> external "runtime" "integer-to-text" n
instance (Show Natural) : n -> external "runtime" "natural-to-text" n
instance (Show Byte) : n -> external "runtime" "byte-to-text" n
instance (Show Signed) : n -> external "runtime" "signed-to-text" n
instance (Show Unsigned) : n -> external "runtime" "unsigned-to-text" n
instance (Show Float) : n -> external "runtime" "float-to-text" n
instance (Show Double) : n -> external "runtime" "double-to-text" n
instance (Show Boolean) : x? -> if x? "True" "False"
instance (Show Index-Error) : just "invalid index"
instance (Show None-Error) : just "found `None`"

Value where (Show Value) => instance (Show (Maybe Value)) : x? -> when x? {
	Some x -> format "Some _" (Show x)
	None -> "None"
}

Success Failure where (Show Success) (Show Failure) =>
	instance (Show (Result Success Failure)) :
		x? -> when x? {
		OK x -> format "OK _" (Show x)
		Error e -> format "Error _" (Show e)
	}

Success Failure where (Show Failure) =>
	instance (Expect (Result Success Failure) Success) :
		message -> x? -> when x? {
			OK x -> x
			Error e -> crash (format "_: _" message e)
		}

[help "Implement the `read` function."]
Read : A => trait (Text -> Maybe A)

[help "Parse `Text` into a value."]
read :: A where (Read A) => Text -> Maybe A
read : Read

instance (Read Text) : Some
instance (Read Number) : text -> external "runtime" "text-to-number" text
instance (Read Integer) : text -> external "runtime" "text-to-integer" text
instance (Read Natural) : text -> external "runtime" "text-to-natural" text
instance (Read Byte) : text -> external "runtime" "text-to-byte" text
instance (Read Signed) : text -> external "runtime" "text-to-signed" text
instance (Read Unsigned) : text -> external "runtime" "text-to-unsigned" text
instance (Read Float) : text -> external "runtime" "text-to-float" text
instance (Read Double) : text -> external "runtime" "text-to-double" text

[help "Read a value from the user with the provided prompt."]
prompt :: A where (Read A) => Text -> A
prompt : prompt -> external "runtime" "prompt" prompt (Read :: (Text -> Maybe A))

[help "Ask the user to pick from a set of options."]
choice :: Element where (Show Element) => Text -> List Element -> Element
choice : prompt -> items -> {
	descriptions : items . transform (((item :: Element) -> Show item) :: (Element -> Text)) . collect :: List Text
	index : external "runtime" "choice" prompt descriptions
	items . nth index . unwrap
}
