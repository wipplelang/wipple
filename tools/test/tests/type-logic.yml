code: |
   Z : type
   S : N => type

   True : type
   False : type

   [allow-overlapping-instances]
   Less-Than : A B R => trait
   N => instance (Less-Than N N False)
   instance (Less-Than (S _) Z False)
   instance (Less-Than Z (S _) True)
   A B R where (Less-Than A B R) => instance (Less-Than (S A) (S B) R)

   a :: A where (Less-Than Z Z A) => A
   a : ...
   _ : _ -> a

   b :: A where (Less-Than (S Z) Z A) => A
   b : ...
   _ : _ -> b

   c :: A where (Less-Than (S (S Z)) (S (S (S Z))) A) => A
   c : ...
   _ : _ -> c

output: |

diagnostics: |
   error: could not determine the type of this expression
      ┌─ test:16:5
      │
   16 │ _ : _ -> a
      │     ^^^^^^
      │     │
      │     try annotating the type with `::`
      │     this has type `a -> False` for some unknown type `a`

   error: could not determine the type of this expression
      ┌─ test:20:5
      │
   20 │ _ : _ -> b
      │     ^^^^^^
      │     │
      │     try annotating the type with `::`
      │     this has type `a -> False` for some unknown type `a`

   error: could not determine the type of this expression
      ┌─ test:24:5
      │
   24 │ _ : _ -> c
      │     ^^^^^^
      │     │
      │     try annotating the type with `::`
      │     this has type `a -> True` for some unknown type `a`
