[Convert a value into `Text` so it can be displayed using `show`.]
[show-code : True]
[on-unimplemented : "cannot display _ on the screen" A]
Show : (A : Text) => trait (A -> Text)

language constant "show" : Show

[Display a value on the screen.]
[playground : "https://wipple.dev/library/base/examples/show.txt"]
[accepts-text : True]
[alias : "print"]
[alias : "println"]
[alias : "display"]
[on-unresolved : "`show` expects a value to be displayed"]
[resolve : "insert a value to display" (show _)]
show :: (A : Text) where (Show A) => A -> ()
show : value -> intrinsic "display" (Show value)

instance (Show Text) : text -> text
instance (Show Number) : n -> semantics "pure" (intrinsic "number-to-text" n)
instance (Show Boolean) : b -> if b "True" "False"
Value where (Show Value) => instance (Show (Maybe Value)) : m -> when m (
    Some value -> "Some _" value
    None -> "None"
)

[Convert to a value from `Text`.]
[on-unimplemented : "cannot produce a _ value from `Text`" A]
Read : A => trait (Text -> Maybe A)

instance (Read Text) : Some
instance (Read Number) : text -> intrinsic "text-to-number" text

[Prompt the user to enter a value.]
prompt :: A where (Read A)=> Text -> A
prompt : prompt -> intrinsic "prompt" prompt Read

[Ask the user to pick from a list of choices.]
choice :: Element where (Show Element) => Text -> List Element -> Element
choice : prompt items -> (
    descriptions : (items . transform Show . collect :: List Text)
    index : intrinsic "choice" prompt descriptions
    items . nth index . unwrap
)
