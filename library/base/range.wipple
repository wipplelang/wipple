-- A continuous range between two numbers.
Range : (N : Number) => type {
    min :: N
    max :: N
}

@(language : "to")
To : N => trait (N N -> Range N)
(N : Number) => instance (To N) : min max -> {
    min : min
    max : max
}

-- A range between two numbers that counts up in discrete steps.
Stride : (N : Number) => type {
    min :: N
    max :: N
    step :: N
}

@(language : "by")
By : (N : Number) => trait ((Range N) N -> Stride N)
(N : Number) => instance (By N) : {
    min : min
    max : max
} step -> {
    min : min
    max : max
    step : step
}

N where (Add N N N) (Order N) => instance (As-Sequence (Stride N) N) : {
    min : min
    max : max
    step : step
} -> do {
    current : min
    sequence {
        if (current < max) {
            n : current
            current! : current + step
            Some n
        } {
            None
        }
    }
}
