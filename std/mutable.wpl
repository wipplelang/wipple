[[no-implicit-use]]

use "fp"
use "math"

[help "Create a shared reference to a value."]
[help-group "Utilities"]
reference :: A => A -> Reference A
reference : value -> semantics "pure" (intrinsic "make-reference" value)

[help "Retrieve the value inside a `Reference`."]
[help-group "Utilities"]
get-reference :: A => Reference A -> A
get-reference : reference -> intrinsic "get-reference" reference

[help "Update the value contained inside a `Reference`."]
[help-group "Utilities"]
set-reference :: A => A -> Reference A -> ()
set-reference : value reference -> intrinsic "set-reference" reference value

[help "A container for a value that can change."]
[help-group "Utilities"]
[sealed]
Mutable : A => type {
  Constant A
  Referred (Reference A)
  Binding (() -> A) (A -> ())
}

[help "Create a new `Mutable` value."]
[help-group "Utilities"]
mutable :: A => A -> Mutable A
mutable : x -> Referred (reference x)

[help "Create a new `Mutable` value that ignores changes."]
[help-group "Utilities"]
constant :: A => A -> Mutable A
constant : Constant

[help "Create a new `Mutable` value that computes its value from a function."]
[help-group "Utilities"]
binding :: A => (() -> A) -> (A -> ()) -> Mutable A
binding : Binding

[help "Project a `Mutable` value to refer to a component of the value."]
[help-group "Utilities"]
project :: A B => (A -> B) -> (B -> A -> A) -> Mutable A -> Mutable B
project : inner outer m -> Binding (() -> inner (get m)) (x -> m . set! (outer x (get m)))

[help "Project a field of a mutable structure."]
[help-group "Utilities"]
project-field : syntax {
  project-field 'field -> project ({ 'field } -> 'field) (f s -> s where { 'field : f })
}

[help "Perform an action when a `Mutable` value changes."]
[help-group "Utilities"]
inspect :: A => (A -> ()) -> Mutable A -> Mutable A
inspect : action -> project it (just (value -> {
  action value
  value
}))

[help "Retrieve the value inside a `Mutable`."]
[help-group "Utilities"]
get :: A => Mutable A -> A
get : m -> when m {
  Constant x -> x
  Referred reference -> get-reference reference
  Binding get _ -> get ()
}

[help "Update the value contained inside a `Mutable`."]
[help-group "Utilities"]
set! :: A => A -> Mutable A -> ()
set! : x m -> when m {
  Constant _ -> ()
  Referred reference -> reference . set-reference x
  Binding _ set -> set x
}

[help "Swap the contents of two `Mutable` values."]
[help-group "Utilities"]
swap! :: A => Mutable A -> Mutable A -> ()
swap! : b a -> {
  temp : get a
  a . set! (get b)
  b . set! temp
}

[help "Toggle a `Mutable Boolean`."]
[help-group "Utilities"]
toggle! :: Mutable Boolean -> ()
toggle! : b -> b . set! (b . get . not)

[help "Add a value to a `Mutable` value."]
[help-group "Math"]
add! :: Left Right where (Add Left Right Left) => Right -> Mutable Left -> ()
add! : x m -> m . set! (get m + x)

[help "Increment a `Mutable` value."]
[help-group "Math"]
increment! :: A where (Add A Natural A) => Mutable A -> ()
increment! : add! 1

[help "Remove the value contained inside a `Mutable` value, replacing it with `Default`."]
[help-group "Utilities"]
take! :: A where (Default A) => Mutable A -> A
take! : m -> {
  value : get m
  m . set! Default
  value
}
