@(language : "number")
Number : type intrinsic

@(language : "text")
Text : type intrinsic

@(language : "maybe")
Maybe : Value => type {
  @(language : "none")
  None

  @(language : "some")
  Some Value
}

@(language : "as")
As : Input Output => trait (Input -> Output)

Input Output where (Error ("cannot convert a _ into _" Input Output)) =>
  default instance (As Input Output) : ...

Value => instance (As Value Value) : value -> value

error :: (Value : Unit) => Text -> Value
error : message -> intrinsic "crash" message

... :: Value => Value
... : error "not implemented"

assert :: Text -> Boolean -> Unit
assert : message -> condition -> if condition {} {error message}

unreachable :: Value => Value
unreachable : error "unreachable"

-- Represents the default or initial value of a type.
Empty : Value => trait Value

Value where (Error ("_ has no empty value" Value)) =>
  default instance (Empty Value) : ...

instance (Empty Number) : 0
instance (Empty Text) : ""
instance (Empty Boolean) : False
Value => instance (Empty (Maybe Value)) : None

-- Send a message to the runtime.
runtime-message :: Input (Output : Unit) => Text Input -> Output
runtime-message : message data -> intrinsic "runtime-message" message data

-- Generate a compile-time error with the provided information. You may provide
-- a single message, or a tuple with multiple pieces of information. Valid types
-- for this tuple include text, `Error-Fix`, and `Error-Location`.
--
-- ## Example
--
-- ```wipple
-- -- Display "cannot multiply two pieces of text" rather than
-- -- "this code requires `(Multiply Text Text)`"
-- (infer Output) where (Error "cannot multiply two pieces of text") =>
--   instance (Multiply Text Text Output) : unreachable
-- ```
@(language : "error")
Error : Info => trait
Info => instance (Error Info)

-- Change the location of a compile-time error generated by the `Error` trait.
-- `Type` should be a type parameter â€” the error will have the location of the
-- first expression with this type.
@(language : "error-location")
Error-Location : Type => type intrinsic

-- Suggest a fix to the user when generating a compile-time error with the
-- `Error` trait. `Message` and `Code` should both be text.
@(language : "error-fix")
Error-Fix : Message Code => type intrinsic

-- When used in an instance, always displays at the location of the value that
-- requested the instance. This can be used with `Error-Location`, as well as
-- `Error-Fix` to insert the source code in the fix.
@(language : "source")
Source : type intrinsic

-- Used in bounds on instances to explain to the user why the instance was
-- chosen.
@(language : "because")
Because : Reason => trait
Reason => instance (Because Reason)

-- Whenever two types are incompatible, the compiler will resolve this trait
-- to display a custom error message generated by `Error`. You can define
-- instances of `Mismatch` to provide custom error messages when your type is
-- expected, but the code provides a value of a different type. (If no instance
-- matches, the compiler will display a default error message.) This trait is
-- useful when you have two concrete types that mismatch, since without type
-- parameters you don't have access to location information.
--
-- ## Example
--
-- ```wipple
-- () where (Error "expected unit for distance") =>
--   instance (Mismatch Distance Number) : ...
-- ```
@(language : "mismatch")
Mismatch : Actual Expected => trait

-- Whenever a value is unused, the compiler will resolve this trait to display a
-- custom error message generated by `Error`. You can define instances of
-- `Unused` to provide custom error messages if your value is supposed to be
-- assigned to a variable or passed to a function.
@(language : "unused")
Unused : Type => trait

-- Provide a text description of a type for use in error messages.
@(language : "describe-type")
Describe-Type : Type (infer Description) => trait

instance (Describe-Type Unit "unit")
instance (Describe-Type Number "number")
instance (Describe-Type Text "piece of text")
Input Output => default instance (Describe-Type (Input -> Output) "function")
Body => default instance (Describe-Type {Body} "block")

-- Display a dropdown with the provided options. The dropdown will evaluate to
-- the selected item at runtime.
@ignore-naming-conventions
Dropdown :: Value => (List Value) Value -> Value
Dropdown : _ selection -> selection

-- Display a slider with the provided value, minimum, and maximum.
@ignore-naming-conventions
Slider :: (Value : Number) where (As Number Value) => Number Number Number -> Value
Slider : current _ _ -> current as Value
