// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`all-any.wipple 1`] = `
{
  "output": 
"True
False
True
True
"
,
}
`;

exports[`asset.wipple 1`] = `
{
  "output": 
"red
"
,
}
`;

exports[`average.wipple 1`] = `
{
  "output": 
"5: {"type":"call"}: stack is empty
stack: [
    {
        "typeDescriptor": {
            "type": "function",
            "value": [
                {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                {
                    "type": "function",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Number",
                                                []
                                            ]
                                        },
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Number",
                                                []
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "named",
                                                "value": [
                                                    "type Number",
                                                    []
                                                ]
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "function",
        "path": "constant reduce / constant helper",
        "ir": [
            [
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Element"
                                                },
                                                {
                                                    "type": "function",
                                                    "value": [
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        },
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "named",
                                                    "value": [
                                                        "type Sequence",
                                                        [
                                                            {
                                                                "type": "parameter",
                                                                "value": "constant reduce / constant helper / type-parameter Element"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [],
                                "constant reduce / constant helper",
                                1
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 0
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "parameter",
                                            "value": "constant reduce / constant helper / type-parameter Element"
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Sequence",
                                                [
                                                    {
                                                        "type": "parameter",
                                                        "value": "constant reduce / constant helper / type-parameter Element"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "type": "parameter",
                                            "value": "constant reduce / constant helper / type-parameter Result"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [],
                                "constant reduce / constant helper",
                                3
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 1
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [
                                    2,
                                    1,
                                    3,
                                    0,
                                    1,
                                    2,
                                    0
                                ],
                                "constant reduce / constant helper",
                                5
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 2
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "named",
                                    "value": [
                                        "type Maybe",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "constant",
                            "value": [
                                "constant next",
                                [
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Element"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                {
                    "type": "variable",
                    "value": 2
                },
                {
                    "type": "call"
                },
                {
                    "type": "jumpIfNot",
                    "value": [
                        "type Maybe / variant Some",
                        8
                    ]
                },
                {
                    "type": "element",
                    "value": 0
                },
                {
                    "type": "initialize",
                    "value": 3
                },
                {
                    "type": "drop"
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Element"
                                                },
                                                {
                                                    "type": "function",
                                                    "value": [
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        },
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "named",
                                                    "value": [
                                                        "type Sequence",
                                                        [
                                                            {
                                                                "type": "parameter",
                                                                "value": "constant reduce / constant helper / type-parameter Element"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "constant",
                            "value": [
                                "constant reduce / constant helper",
                                [
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Element"
                                    },
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Result"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                {
                    "type": "variable",
                    "value": 1
                },
                {
                    "type": "variable",
                    "value": 3
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 0
                },
                {
                    "type": "call"
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 1
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 2
                },
                {
                    "type": "call"
                },
                {
                    "type": "jump",
                    "value": 7
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "jumpIfNot",
                    "value": [
                        "type Maybe / variant None",
                        9
                    ]
                },
                {
                    "type": "drop"
                },
                {
                    "type": "variable",
                    "value": 0
                },
                {
                    "type": "jump",
                    "value": 7
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ]
        ],
        "label": 1,
        "substitutions": {
            "constant reduce / constant helper / type-parameter Element": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "constant reduce / constant helper / type-parameter Result": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            }
        },
        "scope": {},
        "tailCallable": true
    }
]
"
,
}
`;

exports[`bound.wipple 1`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`bounds-are-one-way.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/bounds-are-one-way.wipple",
          "span": {
            "end": 68,
            "start": 67,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/bounds-are-one-way.wipple",
                      "span": {
                        "end": 62,
                        "start": 56,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Number",
                    },
                  },
                },
              ],
              "trait": "trait T",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/bounds-are-one-way.wipple",
                    "span": {
                      "end": 68,
                      "start": 67,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/bounds-are-one-way.wipple",
                          "span": {
                            "end": 62,
                            "start": 56,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Number",
                        },
                      },
                    },
                  ],
                  "trait": "trait T",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`bounds-dont-influence-other-bounds.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
          "span": {
            "end": 198,
            "start": 197,
          },
        },
      },
      "item": {
        "typecheck": {
          "unknownType": {
            "tuple": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                    "span": {
                      "end": 212,
                      "start": 206,
                    },
                  },
                },
                "item": {
                  "declared": {
                    "parameters": [],
                    "path": "type Number",
                  },
                },
              },
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                    "span": {
                      "end": 138,
                      "start": 101,
                    },
                  },
                },
                "item": "unknown",
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
          "span": {
            "end": 198,
            "start": 197,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [
              {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                  "span": {
                    "end": 99,
                    "start": 72,
                  },
                },
              },
              {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                  "span": {
                    "end": 71,
                    "start": 42,
                  },
                },
              },
            ],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                      "span": {
                        "end": 138,
                        "start": 101,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait T",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                    "span": {
                      "end": 198,
                      "start": 197,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/bounds-dont-influence-other-bounds.wipple",
                          "span": {
                            "end": 138,
                            "start": 101,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait T",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`call-function-diagnostic.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/call-function-diagnostic.wipple",
          "span": {
            "end": 84,
            "start": 70,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "pattern",
          "span": {
            "end": 84,
            "start": 70,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/call-function-diagnostic.wipple",
          "span": {
            "end": 97,
            "start": 93,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "text",
        },
      },
    },
  ],
}
`;

exports[`collections.wipple 1`] = `
{
  "output": "",
}
`;

exports[`colliding-instances.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 160,
            "start": 124,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 75",
            "other": "instance 72",
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 160,
            "start": 124,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 75",
            "other": "instance 73",
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 160,
            "start": 124,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 75",
            "other": "instance 74",
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 63,
            "start": 44,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 72",
            "other": "instance 73",
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 63,
            "start": 44,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 72",
            "other": "instance 74",
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/colliding-instances.wipple",
          "span": {
            "end": 83,
            "start": 64,
          },
        },
      },
      "item": {
        "typecheck": {
          "overlappingInstances": {
            "instance": "instance 73",
            "other": "instance 74",
          },
        },
      },
    },
  ],
}
`;

exports[`comparison.wipple 1`] = `
{
  "output": 
"True
True
True
True
True
expected lazy value
"
,
}
`;

exports[`compose.wipple 1`] = `
{
  "output": 
"1
2
1
2
"
,
}
`;

exports[`constant-captured-variables.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-captured-variables.wipple",
          "span": {
            "end": 21,
            "start": 20,
          },
        },
      },
      "item": {
        "read": {
          "kind": "invalidToken",
          "span": {
            "end": 21,
            "start": 20,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-captured-variables.wipple",
          "span": {
            "end": 72,
            "start": 71,
          },
        },
      },
      "item": {
        "read": {
          "kind": "invalidToken",
          "span": {
            "end": 72,
            "start": 71,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-captured-variables.wipple",
          "span": {
            "end": 27,
            "start": 26,
          },
        },
      },
      "item": {
        "read": {
          "kind": {
            "multipleNonAssociativeOperators": {
              "first_span": {
                "end": 19,
                "start": 18,
              },
              "operator": ":",
            },
          },
          "span": {
            "end": 27,
            "start": 26,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-captured-variables.wipple",
          "span": {
            "end": 0,
            "start": 0,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 0,
            "start": 0,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-captured-variables.wipple",
          "span": {
            "end": 60,
            "start": 58,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "n",
        },
      },
    },
  ],
}
`;

exports[`constant-mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/constant-mismatched-types.wipple",
          "span": {
            "end": 36,
            "start": 32,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/constant-mismatched-types.wipple",
                  "span": {
                    "end": 36,
                    "start": 32,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Text",
                },
              },
            },
            "actualRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
                    "span": {
                      "end": 58,
                      "start": 47,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/constant-mismatched-types.wipple",
                  "span": {
                    "end": 27,
                    "start": 21,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Number",
                },
              },
            },
            "expectedRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [
                      {
                        "comment": "should error",
                      },
                    ],
                    "path": "test/tests/constant-mismatched-types.wipple",
                    "span": {
                      "end": 27,
                      "start": 16,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`default-type-parameter.wipple 1`] = `
{
  "output": 
"no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type X",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`destructuring.wipple 1`] = `
{
  "output": 
"Alice
Bob
no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type Person",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`dictionary.wipple 1`] = `
{
  "output": 
"Basketball has 10 letters
Soccer has 6 letters
Golf has 4 letters
"
,
}
`;

exports[`did-you-mean.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/did-you-mean.wipple",
          "span": {
            "end": 21,
            "start": 16,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "print",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/did-you-mean.wipple",
          "span": {
            "end": 40,
            "start": 35,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "hello",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/did-you-mean.wipple",
          "span": {
            "end": 55,
            "start": 53,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "//",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/did-you-mean.wipple",
          "span": {
            "end": 63,
            "start": 56,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "comment",
        },
      },
    },
  ],
}
`;

exports[`divisible-by.wipple 1`] = `
{
  "output": 
"True
False
False
True
"
,
}
`;

exports[`enumeration.wipple 1`] = `
{
  "output": "",
}
`;

exports[`exhaustiveness-checking.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/exhaustiveness-checking.wipple",
          "span": {
            "end": 90,
            "start": 85,
          },
        },
      },
      "item": {
        "typecheck": {
          "missingPatterns": [
            {},
            {},
          ],
        },
      },
    },
  ],
}
`;

exports[`expect-boolean.wipple 1`] = `
{
  "output": 
"error: hello, world
"
,
}
`;

exports[`format.wipple 1`] = `
{
  "output": 
"no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type Person",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`generic-call-within-generic-constant.wipple 1`] = `
{
  "output": "",
}
`;

exports[`generic-instance.wipple 1`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`generic-type.wipple 1`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`greet.wipple 1`] = `
{
  "output": 
"Hello, Bob!
Hello, world!
"
,
}
`;

exports[`hello-world.wipple 1`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`help-show-code.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/help-show-code.wipple",
          "span": {
            "end": 218,
            "start": 208,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/help-show-code.wipple",
                      "span": {
                        "end": 222,
                        "start": 219,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Foo",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/help-show-code.wipple",
                      "span": {
                        "end": 226,
                        "start": 223,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Bar",
                    },
                  },
                },
              ],
              "trait": "trait Compatible",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/help-show-code.wipple",
                    "span": {
                      "end": 218,
                      "start": 208,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/help-show-code.wipple",
                          "span": {
                            "end": 222,
                            "start": 219,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Foo",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/help-show-code.wipple",
                          "span": {
                            "end": 226,
                            "start": 223,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Bar",
                        },
                      },
                    },
                  ],
                  "trait": "trait Compatible",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`infer.wipple 1`] = `
{
  "output": 
"C
Java
"
,
}
`;

exports[`is.wipple 1`] = `
{
  "output": 
"True
False
"
,
}
`;

exports[`linked-list.wipple 1`] = `
{
  "output": 
"6
"
,
}
`;

exports[`list-mismatched-elements.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/list-mismatched-elements.wipple",
          "span": {
            "end": 34,
            "start": 30,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/list-mismatched-elements.wipple",
                  "span": {
                    "end": 34,
                    "start": 30,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Text",
                },
              },
            },
            "actualRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
                    "span": {
                      "end": 58,
                      "start": 47,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/list-mismatched-elements.wipple",
                  "span": {
                    "end": 27,
                    "start": 26,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Number",
                },
              },
            },
            "expectedRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/list-mismatched-elements.wipple",
                    "span": {
                      "end": 39,
                      "start": 26,
                    },
                  },
                },
                "item": "collectionElement",
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/list-mismatched-elements.wipple",
          "span": {
            "end": 39,
            "start": 37,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/list-mismatched-elements.wipple",
                  "span": {
                    "end": 39,
                    "start": 37,
                  },
                },
              },
              "item": {
                "tuple": [],
              },
            },
            "actualRoles": [],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/list-mismatched-elements.wipple",
                  "span": {
                    "end": 27,
                    "start": 26,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Number",
                },
              },
            },
            "expectedRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/list-mismatched-elements.wipple",
                    "span": {
                      "end": 39,
                      "start": 26,
                    },
                  },
                },
                "item": "collectionElement",
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`lists.wipple 1`] = `
{
  "output": 
"Some 1
Some 3
3: {"type":"jumpIfNot","value":["type Maybe / variant Some",6]}: expected variant
while evaluating {
    "typeDescriptor": {
        "type": "named",
        "value": [
            "type Maybe",
            [
                {
                    "type": "named",
                    "value": [
                        "type List",
                        [
                            {
                                "type": "named",
                                "value": [
                                    "type Number",
                                    []
                                ]
                            }
                        ]
                    ]
                }
            ]
        ]
    },
    "type": "list",
    "values": [
        {
            "typeDescriptor": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "type": "number",
            "value": "1"
        },
        {
            "typeDescriptor": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "type": "number",
            "value": "2"
        }
    ]
}
stack: [
    {
        "typeDescriptor": {
            "type": "named",
            "value": [
                "type Maybe",
                [
                    {
                        "type": "named",
                        "value": [
                            "type List",
                            [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                }
                            ]
                        ]
                    }
                ]
            ]
        },
        "type": "list",
        "values": [
            {
                "typeDescriptor": {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                "type": "number",
                "value": "1"
            },
            {
                "typeDescriptor": {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                "type": "number",
                "value": "2"
            }
        ]
    }
]
"
,
}
`;

exports[`logic.wipple 1`] = `
{
  "output": 
"b
a
"
,
}
`;

exports[`math.wipple 1`] = `
{
  "output": 
"3
3
15
2.5
"
,
}
`;

exports[`mismatched-call.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/mismatched-call.wipple",
          "span": {
            "end": 195,
            "start": 188,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/mismatched-call.wipple",
                  "span": {
                    "end": 195,
                    "start": 188,
                  },
                },
              },
              "item": {
                "function": {
                  "input": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/mismatched-call.wipple",
                        "span": {
                          "end": 194,
                          "start": 193,
                        },
                      },
                    },
                    "item": {
                      "declared": {
                        "parameters": [],
                        "path": "type Number",
                      },
                    },
                  },
                  "output": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                        "span": {
                          "end": 369,
                          "start": 358,
                        },
                      },
                    },
                    "item": {
                      "function": {
                        "input": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "test/tests/mismatched-call.wipple",
                              "span": {
                                "end": 190,
                                "start": 189,
                              },
                            },
                          },
                          "item": {
                            "declared": {
                              "parameters": [],
                              "path": "type Number",
                            },
                          },
                        },
                        "output": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "test/tests/mismatched-call.wipple",
                              "span": {
                                "end": 36,
                                "start": 32,
                              },
                            },
                          },
                          "item": {
                            "declared": {
                              "parameters": [],
                              "path": "type Text",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            "actualRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                    "span": {
                      "end": 291,
                      "start": 288,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/mismatched-call.wipple",
                  "span": {
                    "end": 195,
                    "start": 188,
                  },
                },
              },
              "item": {
                "function": {
                  "input": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/mismatched-call.wipple",
                        "span": {
                          "end": 194,
                          "start": 193,
                        },
                      },
                    },
                    "item": {
                      "declared": {
                        "parameters": [],
                        "path": "type Number",
                      },
                    },
                  },
                  "output": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                        "span": {
                          "end": 369,
                          "start": 358,
                        },
                      },
                    },
                    "item": {
                      "function": {
                        "input": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "test/tests/mismatched-call.wipple",
                              "span": {
                                "end": 190,
                                "start": 189,
                              },
                            },
                          },
                          "item": {
                            "declared": {
                              "parameters": [],
                              "path": "type Number",
                            },
                          },
                        },
                        "output": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                              "span": {
                                "end": 432,
                                "start": 426,
                              },
                            },
                          },
                          "item": {
                            "declared": {
                              "parameters": [],
                              "path": "type Number",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            "expectedRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/mismatched-call.wipple",
                    "span": {
                      "end": 195,
                      "start": 188,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`mismatched-inferred-params.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/mismatched-inferred-params.wipple",
          "span": {
            "end": 52,
            "start": 41,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "pattern",
          "span": {
            "end": 52,
            "start": 41,
          },
        },
      },
    },
  ],
}
`;

exports[`mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/mismatched-types.wipple",
          "span": {
            "end": 18,
            "start": 16,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/mismatched-types.wipple",
                  "span": {
                    "end": 18,
                    "start": 16,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Number",
                },
              },
            },
            "actualRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
                    "span": {
                      "end": 13,
                      "start": 0,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/mismatched-types.wipple",
                  "span": {
                    "end": 26,
                    "start": 22,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Text",
                },
              },
            },
            "expectedRoles": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/mismatched-types.wipple",
                    "span": {
                      "end": 18,
                      "start": 16,
                    },
                  },
                },
                "item": "annotation",
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`missing-instance.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/missing-instance.wipple",
          "span": {
            "end": 37,
            "start": 33,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/missing-instance.wipple",
                      "span": {
                        "end": 41,
                        "start": 38,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Foo",
                    },
                  },
                },
              ],
              "trait": "trait Show",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/missing-instance.wipple",
                    "span": {
                      "end": 37,
                      "start": 33,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/missing-instance.wipple",
                          "span": {
                            "end": 41,
                            "start": 38,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Foo",
                        },
                      },
                    },
                  ],
                  "trait": "trait Show",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`mutable.wipple 1`] = `
{
  "output": 
"2
"
,
}
`;

exports[`negate.wipple 1`] = `
{
  "output": 
"True
"
,
}
`;

exports[`nested-bounds.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/nested-bounds.wipple",
          "span": {
            "end": 202,
            "start": 201,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/nested-bounds.wipple",
                      "span": {
                        "end": 199,
                        "start": 163,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait W",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/nested-bounds.wipple",
                    "span": {
                      "end": 202,
                      "start": 201,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/nested-bounds.wipple",
                          "span": {
                            "end": 199,
                            "start": 163,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait T",
                },
              },
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/nested-bounds.wipple",
                    "span": {
                      "end": 125,
                      "start": 89,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/nested-bounds.wipple",
                          "span": {
                            "end": 199,
                            "start": 163,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait U",
                },
              },
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/nested-bounds.wipple",
                    "span": {
                      "end": 162,
                      "start": 126,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/nested-bounds.wipple",
                          "span": {
                            "end": 199,
                            "start": 163,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait V",
                },
              },
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/nested-bounds.wipple",
                    "span": {
                      "end": 199,
                      "start": 163,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/nested-bounds.wipple",
                          "span": {
                            "end": 199,
                            "start": 163,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait W",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`not.wipple 1`] = `
{
  "output": 
"expected lazy value
"
,
}
`;

exports[`number-units.wipple 1`] = `
{
  "output": 
"no instance found for trait trait Equal with type descriptor {"type":"function","value":[{"type":"named","value":["type Elephants",[]]},{"type":"function","value":[{"type":"named","value":["type Elephants",[]]},{"type":"named","value":["type Boolean",[]]}]}]}
"
,
}
`;

exports[`operator-partial-application.wipple 1`] = `
{
  "output": 
"2
3
4
4
4
4
"
,
}
`;

exports[`operator-without-parentheses.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/operator-without-parentheses.wipple",
          "span": {
            "end": 26,
            "start": 16,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 22,
                        "start": 16,
                      },
                    },
                  },
                  "item": {
                    "tuple": [],
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 26,
                        "start": 25,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Number",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                      "span": {
                        "end": 370,
                        "start": 288,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait Add",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/operator-without-parentheses.wipple",
                    "span": {
                      "end": 26,
                      "start": 16,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 22,
                            "start": 16,
                          },
                        },
                      },
                      "item": {
                        "tuple": [],
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 26,
                            "start": 25,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Number",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                          "span": {
                            "end": 370,
                            "start": 288,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait Add",
                },
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/operator-without-parentheses.wipple",
          "span": {
            "end": 45,
            "start": 27,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 36,
                        "start": 27,
                      },
                    },
                  },
                  "item": {
                    "tuple": [],
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 45,
                        "start": 40,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Boolean",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "/Users/wilson/Desktop/wipple-wasm/library/base/logic.wipple",
                      "span": {
                        "end": 1116,
                        "start": 1046,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait Or",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/operator-without-parentheses.wipple",
                    "span": {
                      "end": 45,
                      "start": 27,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 36,
                            "start": 27,
                          },
                        },
                      },
                      "item": {
                        "tuple": [],
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 45,
                            "start": 40,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Boolean",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "/Users/wilson/Desktop/wipple-wasm/library/base/logic.wipple",
                          "span": {
                            "end": 1116,
                            "start": 1046,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait Or",
                },
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/operator-without-parentheses.wipple",
          "span": {
            "end": 61,
            "start": 51,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 53,
                        "start": 52,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Number",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/operator-without-parentheses.wipple",
                      "span": {
                        "end": 60,
                        "start": 56,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Text",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                      "span": {
                        "end": 370,
                        "start": 288,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait Add",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/operator-without-parentheses.wipple",
                    "span": {
                      "end": 61,
                      "start": 51,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 53,
                            "start": 52,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Number",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/operator-without-parentheses.wipple",
                          "span": {
                            "end": 60,
                            "start": 56,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Text",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                          "span": {
                            "end": 370,
                            "start": 288,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait Add",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`or-pattern.wipple 1`] = `
{
  "output": 
"yay
"
,
}
`;

exports[`random.wipple 1`] = `
{
  "output": 
"0
1.8
list position must be a whole number
"
,
}
`;

exports[`recursive-instance.wipple 1`] = `
{
  "output": 
"Some Some 42
"
,
}
`;

exports[`remove-duplicates.wipple 1`] = `
{
  "output": 
"5
4
3
2
1
"
,
}
`;

exports[`repeat.wipple 1`] = `
{
  "output": 
"Hello, world!
Hello, world!
Hello, world!
Hello, world!
"
,
}
`;

exports[`set.wipple 1`] = `
{
  "output": 
"True
True
True
False
"
,
}
`;

exports[`show-variable.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/show-variable.wipple",
          "span": {
            "end": 92,
            "start": 88,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/show-variable.wipple",
                      "span": {
                        "end": 104,
                        "start": 93,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Cannot-Be-Shown",
                    },
                  },
                },
              ],
              "trait": "trait Show",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/show-variable.wipple",
                    "span": {
                      "end": 92,
                      "start": 88,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/show-variable.wipple",
                          "span": {
                            "end": 104,
                            "start": 93,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Cannot-Be-Shown",
                        },
                      },
                    },
                  ],
                  "trait": "trait Show",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`slice.wipple 1`] = `
{
  "output": 
"c
d
e
f
g
h
"
,
}
`;

exports[`too-many-inputs.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/too-many-inputs.wipple",
          "span": {
            "end": 22,
            "start": 16,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/too-many-inputs.wipple",
                  "span": {
                    "end": 22,
                    "start": 16,
                  },
                },
              },
              "item": {
                "tuple": [],
              },
            },
            "actualRoles": [],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/too-many-inputs.wipple",
                  "span": {
                    "end": 22,
                    "start": 16,
                  },
                },
              },
              "item": {
                "function": {
                  "input": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/too-many-inputs.wipple",
                        "span": {
                          "end": 24,
                          "start": 23,
                        },
                      },
                    },
                    "item": {
                      "declared": {
                        "parameters": [],
                        "path": "type Number",
                      },
                    },
                  },
                  "output": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/too-many-inputs.wipple",
                        "span": {
                          "end": 24,
                          "start": 16,
                        },
                      },
                    },
                    "item": {
                      "function": {
                        "input": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "test/tests/too-many-inputs.wipple",
                              "span": {
                                "end": 26,
                                "start": 25,
                              },
                            },
                          },
                          "item": {
                            "declared": {
                              "parameters": [],
                              "path": "type Number",
                            },
                          },
                        },
                        "output": {
                          "info": {
                            "parserInfo": {
                              "documentation": [],
                              "path": "top-level",
                              "span": {
                                "end": 0,
                                "start": 0,
                              },
                            },
                          },
                          "item": {
                            "tuple": [],
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            "expectedRoles": [],
          },
        },
      },
    },
  ],
}
`;

exports[`trig.wipple 1`] = `
{
  "output": 
"expected number
"
,
}
`;

exports[`type-arithmetic.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-arithmetic.wipple",
          "span": {
            "end": 62,
            "start": 57,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "type",
          "span": {
            "end": 62,
            "start": 57,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-arithmetic.wipple",
          "span": {
            "end": 88,
            "start": 63,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 88,
            "start": 63,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-arithmetic.wipple",
          "span": {
            "end": 150,
            "start": 89,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 150,
            "start": 89,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-arithmetic.wipple",
          "span": {
            "end": 62,
            "start": 40,
          },
        },
      },
      "item": {
        "lower": {
          "alreadyDefined": "trait Add",
        },
      },
    },
  ],
}
`;

exports[`type-logic.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 131,
            "start": 126,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "type",
          "span": {
            "end": 131,
            "start": 126,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 167,
            "start": 132,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 167,
            "start": 132,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 304,
            "start": 237,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 304,
            "start": 237,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [
            {
              "comment": "sealed",
            },
            {
              "comment": "allow-overlapping-instances",
            },
          ],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 131,
            "start": 105,
          },
        },
      },
      "item": {
        "lower": {
          "alreadyDefined": "trait Less-Than",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 176,
            "start": 168,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "instance",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 190,
            "start": 189,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "S",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 192,
            "start": 191,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "_",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 195,
            "start": 194,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "Z",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 211,
            "start": 203,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "instance",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 224,
            "start": 223,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "Z",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 227,
            "start": 226,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "S",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 229,
            "start": 228,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "_",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 195,
            "start": 178,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/type-logic.wipple",
                  "span": {
                    "end": 195,
                    "start": 178,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Boolean",
                },
              },
            },
            "actualRoles": [],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/type-logic.wipple",
                  "span": {
                    "end": 195,
                    "start": 178,
                  },
                },
              },
              "item": {
                "function": {
                  "input": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/type-logic.wipple",
                        "span": {
                          "end": 201,
                          "start": 196,
                        },
                      },
                    },
                    "item": {
                      "declared": {
                        "parameters": [],
                        "path": "type Boolean",
                      },
                    },
                  },
                  "output": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/type-logic.wipple",
                        "span": {
                          "end": 201,
                          "start": 178,
                        },
                      },
                    },
                    "item": "unknown",
                  },
                },
              },
            },
            "expectedRoles": [],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-logic.wipple",
          "span": {
            "end": 229,
            "start": 213,
          },
        },
      },
      "item": {
        "typecheck": {
          "mismatch": {
            "actual": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/type-logic.wipple",
                  "span": {
                    "end": 229,
                    "start": 213,
                  },
                },
              },
              "item": {
                "declared": {
                  "parameters": [],
                  "path": "type Boolean",
                },
              },
            },
            "actualRoles": [],
            "expected": {
              "info": {
                "parserInfo": {
                  "documentation": [],
                  "path": "test/tests/type-logic.wipple",
                  "span": {
                    "end": 229,
                    "start": 213,
                  },
                },
              },
              "item": {
                "function": {
                  "input": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/type-logic.wipple",
                        "span": {
                          "end": 235,
                          "start": 231,
                        },
                      },
                    },
                    "item": {
                      "declared": {
                        "parameters": [],
                        "path": "type Boolean",
                      },
                    },
                  },
                  "output": {
                    "info": {
                      "parserInfo": {
                        "documentation": [],
                        "path": "test/tests/type-logic.wipple",
                        "span": {
                          "end": 235,
                          "start": 213,
                        },
                      },
                    },
                    "item": "unknown",
                  },
                },
              },
            },
            "expectedRoles": [],
          },
        },
      },
    },
  ],
}
`;

exports[`type-span.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-span.wipple",
          "span": {
            "end": 24,
            "start": 16,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/type-span.wipple",
                      "span": {
                        "end": 20,
                        "start": 16,
                      },
                    },
                  },
                  "item": {
                    "function": {
                      "input": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                            "span": {
                              "end": 520,
                              "start": 516,
                            },
                          },
                        },
                        "item": {
                          "declared": {
                            "parameters": [],
                            "path": "type Text",
                          },
                        },
                      },
                      "output": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                            "span": {
                              "end": 547,
                              "start": 545,
                            },
                          },
                        },
                        "item": {
                          "tuple": [],
                        },
                      },
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/type-span.wipple",
                      "span": {
                        "end": 24,
                        "start": 23,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Number",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                      "span": {
                        "end": 370,
                        "start": 288,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait Add",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/type-span.wipple",
                    "span": {
                      "end": 24,
                      "start": 16,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/type-span.wipple",
                          "span": {
                            "end": 20,
                            "start": 16,
                          },
                        },
                      },
                      "item": {
                        "function": {
                          "input": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                                "span": {
                                  "end": 520,
                                  "start": 516,
                                },
                              },
                            },
                            "item": {
                              "declared": {
                                "parameters": [],
                                "path": "type Text",
                              },
                            },
                          },
                          "output": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                                "span": {
                                  "end": 547,
                                  "start": 545,
                                },
                              },
                            },
                            "item": {
                              "tuple": [],
                            },
                          },
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/type-span.wipple",
                          "span": {
                            "end": 24,
                            "start": 23,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Number",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                          "span": {
                            "end": 370,
                            "start": 288,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait Add",
                },
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-span.wipple",
          "span": {
            "end": 33,
            "start": 25,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/type-span.wipple",
                      "span": {
                        "end": 29,
                        "start": 25,
                      },
                    },
                  },
                  "item": {
                    "function": {
                      "input": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                            "span": {
                              "end": 158,
                              "start": 154,
                            },
                          },
                        },
                        "item": {
                          "declared": {
                            "parameters": [],
                            "path": "type Text",
                          },
                        },
                      },
                      "output": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                            "span": {
                              "end": 179,
                              "start": 175,
                            },
                          },
                        },
                        "item": {
                          "declared": {
                            "parameters": [],
                            "path": "type Text",
                          },
                        },
                      },
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/type-span.wipple",
                      "span": {
                        "end": 33,
                        "start": 32,
                      },
                    },
                  },
                  "item": {
                    "declared": {
                      "parameters": [],
                      "path": "type Number",
                    },
                  },
                },
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                      "span": {
                        "end": 370,
                        "start": 288,
                      },
                    },
                  },
                  "item": "unknown",
                },
              ],
              "trait": "trait Add",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/type-span.wipple",
                    "span": {
                      "end": 33,
                      "start": 25,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/type-span.wipple",
                          "span": {
                            "end": 29,
                            "start": 25,
                          },
                        },
                      },
                      "item": {
                        "function": {
                          "input": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                                "span": {
                                  "end": 158,
                                  "start": 154,
                                },
                              },
                            },
                            "item": {
                              "declared": {
                                "parameters": [],
                                "path": "type Text",
                              },
                            },
                          },
                          "output": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "/Users/wilson/Desktop/wipple-wasm/library/base/io.wipple",
                                "span": {
                                  "end": 179,
                                  "start": 175,
                                },
                              },
                            },
                            "item": {
                              "declared": {
                                "parameters": [],
                                "path": "type Text",
                              },
                            },
                          },
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/type-span.wipple",
                          "span": {
                            "end": 33,
                            "start": 32,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Number",
                        },
                      },
                    },
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
                          "span": {
                            "end": 370,
                            "start": 288,
                          },
                        },
                      },
                      "item": "unknown",
                    },
                  ],
                  "trait": "trait Add",
                },
              },
            ],
          },
        },
      },
    },
  ],
}
`;

exports[`type-states.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-states.wipple",
          "span": {
            "end": 281,
            "start": 280,
          },
        },
      },
      "item": {
        "read": {
          "kind": {
            "multipleNonAssociativeOperators": {
              "first_span": {
                "end": 240,
                "start": 239,
              },
              "operator": ":",
            },
          },
          "span": {
            "end": 281,
            "start": 280,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/type-states.wipple",
          "span": {
            "end": 0,
            "start": 0,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 0,
            "start": 0,
          },
        },
      },
    },
  ],
}
`;

exports[`undefined-math-ops.wipple 1`] = `
{
  "output": 
"NaN
Infinity
NaN
NaN
1.7976931348623159077e+308
"
,
}
`;

exports[`undefined-name.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/undefined-name.wipple",
          "span": {
            "end": 19,
            "start": 16,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "foo",
        },
      },
    },
  ],
}
`;

exports[`unresolved-type-multiple-parameters.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/unresolved-type-multiple-parameters.wipple",
          "span": {
            "end": 87,
            "start": 86,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "T",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/unresolved-type-multiple-parameters.wipple",
          "span": {
            "end": 223,
            "start": 222,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "U",
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/unresolved-type-multiple-parameters.wipple",
          "span": {
            "end": 245,
            "start": 244,
          },
        },
      },
      "item": {
        "lower": {
          "unresolvedName": "U",
        },
      },
    },
  ],
}
`;

exports[`unzip.wipple 1`] = `
{
  "output": 
"Left:
1
2
3
Right:
a
b
c
"
,
}
`;

exports[`when-mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 33,
            "start": 32,
          },
        },
      },
      "item": {
        "read": {
          "kind": "invalidToken",
          "span": {
            "end": 33,
            "start": 32,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 64,
            "start": 63,
          },
        },
      },
      "item": {
        "read": {
          "kind": "invalidToken",
          "span": {
            "end": 64,
            "start": 63,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 34,
            "start": 33,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "type",
          "span": {
            "end": 34,
            "start": 33,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 47,
            "start": 46,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "type",
          "span": {
            "end": 47,
            "start": 46,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 63,
            "start": 62,
          },
        },
      },
      "item": {
        "parse": {
          "expected": "expression",
          "span": {
            "end": 63,
            "start": 62,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 62,
            "start": 58,
          },
        },
      },
      "item": {
        "syntax": {
          "invalidPlaceholderText": {
            "expected": 0,
            "found": 1,
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 46,
            "start": 44,
          },
        },
      },
      "item": {
        "typecheck": {
          "unknownType": {
            "function": {
              "input": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 46,
                      "start": 44,
                    },
                  },
                },
                "item": "unknown",
              },
              "output": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 47,
                      "start": 46,
                    },
                  },
                },
                "item": {
                  "function": {
                    "input": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 54,
                            "start": 49,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Boolean",
                        },
                      },
                    },
                    "output": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 54,
                            "start": 49,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Text",
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 31,
            "start": 27,
          },
        },
      },
      "item": {
        "typecheck": {
          "unknownType": {
            "function": {
              "input": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 31,
                      "start": 27,
                    },
                  },
                },
                "item": "unknown",
              },
              "output": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 34,
                      "start": 33,
                    },
                  },
                },
                "item": {
                  "function": {
                    "input": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 40,
                            "start": 36,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Boolean",
                        },
                      },
                    },
                    "output": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 40,
                            "start": 36,
                          },
                        },
                      },
                      "item": {
                        "function": {
                          "input": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 46,
                                  "start": 44,
                                },
                              },
                            },
                            "item": {
                              "declared": {
                                "parameters": [],
                                "path": "type Number",
                              },
                            },
                          },
                          "output": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 46,
                                  "start": 44,
                                },
                              },
                            },
                            "item": {
                              "function": {
                                "input": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 46,
                                        "start": 44,
                                      },
                                    },
                                  },
                                  "item": "unknown",
                                },
                                "output": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 47,
                                        "start": 46,
                                      },
                                    },
                                  },
                                  "item": {
                                    "function": {
                                      "input": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 54,
                                              "start": 49,
                                            },
                                          },
                                        },
                                        "item": {
                                          "declared": {
                                            "parameters": [],
                                            "path": "type Boolean",
                                          },
                                        },
                                      },
                                      "output": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 54,
                                              "start": 49,
                                            },
                                          },
                                        },
                                        "item": {
                                          "declared": {
                                            "parameters": [],
                                            "path": "type Text",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 65,
            "start": 21,
          },
        },
      },
      "item": {
        "typecheck": {
          "unknownType": {
            "function": {
              "input": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 65,
                      "start": 21,
                    },
                  },
                },
                "item": "unknown",
              },
              "output": {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 26,
                      "start": 22,
                    },
                  },
                },
                "item": {
                  "function": {
                    "input": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 31,
                            "start": 27,
                          },
                        },
                      },
                      "item": {
                        "declared": {
                          "parameters": [],
                          "path": "type Boolean",
                        },
                      },
                    },
                    "output": {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 31,
                            "start": 27,
                          },
                        },
                      },
                      "item": {
                        "function": {
                          "input": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 31,
                                  "start": 27,
                                },
                              },
                            },
                            "item": "unknown",
                          },
                          "output": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 34,
                                  "start": 33,
                                },
                              },
                            },
                            "item": {
                              "function": {
                                "input": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 40,
                                        "start": 36,
                                      },
                                    },
                                  },
                                  "item": {
                                    "declared": {
                                      "parameters": [],
                                      "path": "type Boolean",
                                    },
                                  },
                                },
                                "output": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 40,
                                        "start": 36,
                                      },
                                    },
                                  },
                                  "item": {
                                    "function": {
                                      "input": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 46,
                                              "start": 44,
                                            },
                                          },
                                        },
                                        "item": {
                                          "declared": {
                                            "parameters": [],
                                            "path": "type Number",
                                          },
                                        },
                                      },
                                      "output": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 46,
                                              "start": 44,
                                            },
                                          },
                                        },
                                        "item": {
                                          "function": {
                                            "input": {
                                              "info": {
                                                "parserInfo": {
                                                  "documentation": [],
                                                  "path": "test/tests/when-mismatched-types.wipple",
                                                  "span": {
                                                    "end": 46,
                                                    "start": 44,
                                                  },
                                                },
                                              },
                                              "item": "unknown",
                                            },
                                            "output": {
                                              "info": {
                                                "parserInfo": {
                                                  "documentation": [],
                                                  "path": "test/tests/when-mismatched-types.wipple",
                                                  "span": {
                                                    "end": 47,
                                                    "start": 46,
                                                  },
                                                },
                                              },
                                              "item": {
                                                "function": {
                                                  "input": {
                                                    "info": {
                                                      "parserInfo": {
                                                        "documentation": [],
                                                        "path": "test/tests/when-mismatched-types.wipple",
                                                        "span": {
                                                          "end": 54,
                                                          "start": 49,
                                                        },
                                                      },
                                                    },
                                                    "item": {
                                                      "declared": {
                                                        "parameters": [],
                                                        "path": "type Boolean",
                                                      },
                                                    },
                                                  },
                                                  "output": {
                                                    "info": {
                                                      "parserInfo": {
                                                        "documentation": [],
                                                        "path": "test/tests/when-mismatched-types.wipple",
                                                        "span": {
                                                          "end": 54,
                                                          "start": 49,
                                                        },
                                                      },
                                                    },
                                                    "item": {
                                                      "declared": {
                                                        "parameters": [],
                                                        "path": "type Text",
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 20,
            "start": 16,
          },
        },
      },
      "item": {
        "typecheck": {
          "unresolvedInstance": {
            "candidates": [],
            "instance": {
              "parameters": [
                {
                  "info": {
                    "parserInfo": {
                      "documentation": [],
                      "path": "test/tests/when-mismatched-types.wipple",
                      "span": {
                        "end": 65,
                        "start": 21,
                      },
                    },
                  },
                  "item": {
                    "function": {
                      "input": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "test/tests/when-mismatched-types.wipple",
                            "span": {
                              "end": 65,
                              "start": 21,
                            },
                          },
                        },
                        "item": "unknown",
                      },
                      "output": {
                        "info": {
                          "parserInfo": {
                            "documentation": [],
                            "path": "test/tests/when-mismatched-types.wipple",
                            "span": {
                              "end": 26,
                              "start": 22,
                            },
                          },
                        },
                        "item": {
                          "function": {
                            "input": {
                              "info": {
                                "parserInfo": {
                                  "documentation": [],
                                  "path": "test/tests/when-mismatched-types.wipple",
                                  "span": {
                                    "end": 31,
                                    "start": 27,
                                  },
                                },
                              },
                              "item": {
                                "declared": {
                                  "parameters": [],
                                  "path": "type Boolean",
                                },
                              },
                            },
                            "output": {
                              "info": {
                                "parserInfo": {
                                  "documentation": [],
                                  "path": "test/tests/when-mismatched-types.wipple",
                                  "span": {
                                    "end": 31,
                                    "start": 27,
                                  },
                                },
                              },
                              "item": {
                                "function": {
                                  "input": {
                                    "info": {
                                      "parserInfo": {
                                        "documentation": [],
                                        "path": "test/tests/when-mismatched-types.wipple",
                                        "span": {
                                          "end": 31,
                                          "start": 27,
                                        },
                                      },
                                    },
                                    "item": "unknown",
                                  },
                                  "output": {
                                    "info": {
                                      "parserInfo": {
                                        "documentation": [],
                                        "path": "test/tests/when-mismatched-types.wipple",
                                        "span": {
                                          "end": 34,
                                          "start": 33,
                                        },
                                      },
                                    },
                                    "item": {
                                      "function": {
                                        "input": {
                                          "info": {
                                            "parserInfo": {
                                              "documentation": [],
                                              "path": "test/tests/when-mismatched-types.wipple",
                                              "span": {
                                                "end": 40,
                                                "start": 36,
                                              },
                                            },
                                          },
                                          "item": {
                                            "declared": {
                                              "parameters": [],
                                              "path": "type Boolean",
                                            },
                                          },
                                        },
                                        "output": {
                                          "info": {
                                            "parserInfo": {
                                              "documentation": [],
                                              "path": "test/tests/when-mismatched-types.wipple",
                                              "span": {
                                                "end": 40,
                                                "start": 36,
                                              },
                                            },
                                          },
                                          "item": {
                                            "function": {
                                              "input": {
                                                "info": {
                                                  "parserInfo": {
                                                    "documentation": [],
                                                    "path": "test/tests/when-mismatched-types.wipple",
                                                    "span": {
                                                      "end": 46,
                                                      "start": 44,
                                                    },
                                                  },
                                                },
                                                "item": {
                                                  "declared": {
                                                    "parameters": [],
                                                    "path": "type Number",
                                                  },
                                                },
                                              },
                                              "output": {
                                                "info": {
                                                  "parserInfo": {
                                                    "documentation": [],
                                                    "path": "test/tests/when-mismatched-types.wipple",
                                                    "span": {
                                                      "end": 46,
                                                      "start": 44,
                                                    },
                                                  },
                                                },
                                                "item": {
                                                  "function": {
                                                    "input": {
                                                      "info": {
                                                        "parserInfo": {
                                                          "documentation": [],
                                                          "path": "test/tests/when-mismatched-types.wipple",
                                                          "span": {
                                                            "end": 46,
                                                            "start": 44,
                                                          },
                                                        },
                                                      },
                                                      "item": "unknown",
                                                    },
                                                    "output": {
                                                      "info": {
                                                        "parserInfo": {
                                                          "documentation": [],
                                                          "path": "test/tests/when-mismatched-types.wipple",
                                                          "span": {
                                                            "end": 47,
                                                            "start": 46,
                                                          },
                                                        },
                                                      },
                                                      "item": {
                                                        "function": {
                                                          "input": {
                                                            "info": {
                                                              "parserInfo": {
"documentation": [],
"path": "test/tests/when-mismatched-types.wipple",
"span": {
"end": 54,
"start": 49,
},
                                                              },
                                                            },
                                                            "item": {
                                                              "declared": {
"parameters": [],
"path": "type Boolean",
                                                              },
                                                            },
                                                          },
                                                          "output": {
                                                            "info": {
                                                              "parserInfo": {
"documentation": [],
"path": "test/tests/when-mismatched-types.wipple",
"span": {
"end": 54,
"start": 49,
},
                                                              },
                                                            },
                                                            "item": {
                                                              "declared": {
"parameters": [],
"path": "type Text",
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              ],
              "trait": "trait Show",
            },
            "stack": [
              {
                "info": {
                  "parserInfo": {
                    "documentation": [],
                    "path": "test/tests/when-mismatched-types.wipple",
                    "span": {
                      "end": 20,
                      "start": 16,
                    },
                  },
                },
                "item": {
                  "parameters": [
                    {
                      "info": {
                        "parserInfo": {
                          "documentation": [],
                          "path": "test/tests/when-mismatched-types.wipple",
                          "span": {
                            "end": 65,
                            "start": 21,
                          },
                        },
                      },
                      "item": {
                        "function": {
                          "input": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 65,
                                  "start": 21,
                                },
                              },
                            },
                            "item": "unknown",
                          },
                          "output": {
                            "info": {
                              "parserInfo": {
                                "documentation": [],
                                "path": "test/tests/when-mismatched-types.wipple",
                                "span": {
                                  "end": 26,
                                  "start": 22,
                                },
                              },
                            },
                            "item": {
                              "function": {
                                "input": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 31,
                                        "start": 27,
                                      },
                                    },
                                  },
                                  "item": {
                                    "declared": {
                                      "parameters": [],
                                      "path": "type Boolean",
                                    },
                                  },
                                },
                                "output": {
                                  "info": {
                                    "parserInfo": {
                                      "documentation": [],
                                      "path": "test/tests/when-mismatched-types.wipple",
                                      "span": {
                                        "end": 31,
                                        "start": 27,
                                      },
                                    },
                                  },
                                  "item": {
                                    "function": {
                                      "input": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 31,
                                              "start": 27,
                                            },
                                          },
                                        },
                                        "item": "unknown",
                                      },
                                      "output": {
                                        "info": {
                                          "parserInfo": {
                                            "documentation": [],
                                            "path": "test/tests/when-mismatched-types.wipple",
                                            "span": {
                                              "end": 34,
                                              "start": 33,
                                            },
                                          },
                                        },
                                        "item": {
                                          "function": {
                                            "input": {
                                              "info": {
                                                "parserInfo": {
                                                  "documentation": [],
                                                  "path": "test/tests/when-mismatched-types.wipple",
                                                  "span": {
                                                    "end": 40,
                                                    "start": 36,
                                                  },
                                                },
                                              },
                                              "item": {
                                                "declared": {
                                                  "parameters": [],
                                                  "path": "type Boolean",
                                                },
                                              },
                                            },
                                            "output": {
                                              "info": {
                                                "parserInfo": {
                                                  "documentation": [],
                                                  "path": "test/tests/when-mismatched-types.wipple",
                                                  "span": {
                                                    "end": 40,
                                                    "start": 36,
                                                  },
                                                },
                                              },
                                              "item": {
                                                "function": {
                                                  "input": {
                                                    "info": {
                                                      "parserInfo": {
                                                        "documentation": [],
                                                        "path": "test/tests/when-mismatched-types.wipple",
                                                        "span": {
                                                          "end": 46,
                                                          "start": 44,
                                                        },
                                                      },
                                                    },
                                                    "item": {
                                                      "declared": {
                                                        "parameters": [],
                                                        "path": "type Number",
                                                      },
                                                    },
                                                  },
                                                  "output": {
                                                    "info": {
                                                      "parserInfo": {
                                                        "documentation": [],
                                                        "path": "test/tests/when-mismatched-types.wipple",
                                                        "span": {
                                                          "end": 46,
                                                          "start": 44,
                                                        },
                                                      },
                                                    },
                                                    "item": {
                                                      "function": {
                                                        "input": {
                                                          "info": {
                                                            "parserInfo": {
                                                              "documentation": [],
                                                              "path": "test/tests/when-mismatched-types.wipple",
                                                              "span": {
"end": 46,
"start": 44,
                                                              },
                                                            },
                                                          },
                                                          "item": "unknown",
                                                        },
                                                        "output": {
                                                          "info": {
                                                            "parserInfo": {
                                                              "documentation": [],
                                                              "path": "test/tests/when-mismatched-types.wipple",
                                                              "span": {
"end": 47,
"start": 46,
                                                              },
                                                            },
                                                          },
                                                          "item": {
                                                            "function": {
                                                              "input": {
"info": {
"parserInfo": {
"documentation": [],
"path": "test/tests/when-mismatched-types.wipple",
"span": {
"end": 54,
"start": 49,
},
},
},
"item": {
"declared": {
"parameters": [],
"path": "type Boolean",
},
},
                                                              },
                                                              "output": {
"info": {
"parserInfo": {
"documentation": [],
"path": "test/tests/when-mismatched-types.wipple",
"span": {
"end": 54,
"start": 49,
},
},
},
"item": {
"declared": {
"parameters": [],
"path": "type Text",
},
},
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  ],
                  "trait": "trait Show",
                },
              },
            ],
          },
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 26,
            "start": 22,
          },
        },
      },
      "item": {
        "typecheck": {
          "missingPatterns": [
            {},
          ],
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 34,
            "start": 33,
          },
        },
      },
      "item": {
        "typecheck": {
          "missingPatterns": [
            {},
          ],
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 40,
            "start": 36,
          },
        },
      },
      "item": {
        "typecheck": {
          "missingPatterns": [
            "binding",
          ],
        },
      },
    },
    {
      "info": {
        "parserInfo": {
          "documentation": [],
          "path": "test/tests/when-mismatched-types.wipple",
          "span": {
            "end": 47,
            "start": 46,
          },
        },
      },
      "item": {
        "typecheck": {
          "missingPatterns": [
            {},
          ],
        },
      },
    },
  ],
}
`;

exports[`when.wipple 1`] = `
{
  "output": 
"Yay!
"
,
}
`;

exports[`where-pattern.wipple 1`] = `
{
  "output": 
"oh no
"
,
}
`;
