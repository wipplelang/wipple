-- The number returned from calculations whose result is undefined (eg. dividing
-- by zero).
undefined :: Number
undefined : intrinsic "undefined-number"

-- Add two values together, returning the sum.
@(language : "add")
Add : (Left : Number) (Right : Number) (infer Sum) => trait (Left Right -> Sum)
instance (Add Number Number Number) : left right -> intrinsic "add-number" left right

Left Right Sum where (Error ("cannot-add" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Add Left Right Sum) : ...

Right Sum where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "+")) =>
  instance (Add None Right Sum) : ...

-- Subtract the one value from another, returning the difference.
@(language : "subtract")
Subtract : (Left : Number) (Right : Number) (infer Difference) => trait (Left Right -> Difference)
instance (Subtract Number Number Number) : left right -> intrinsic "subtract-number" left right

Left Right Difference where (Error ("cannot-subtract" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Subtract Left Right Difference) : ...

Right Difference where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "-")) =>
  instance (Subtract None Right Difference) : ...

-- Multiply two values together, returning the product.
@(language : "multiply")
Multiply : (Left : Number) (Right : Number) (infer Product) => trait (Left Right -> Product)
instance (Multiply Number Number Number) : left right -> intrinsic "multiply-number" left right

Left Right Product where (Error ("cannot-multiply" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Multiply Left Right Product) : ...

Right Product where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "*")) =>
  instance (Multiply None Right Product) : ...

-- Divide two numbers, returning the quotient.
@(language : "divide")
Divide : (Left : Number) (Right : Number) (infer Quotient) => trait (Left Right -> Quotient)
instance (Divide Number Number Number) : left right -> intrinsic "divide-number" left right

Left Right Quotient where (Error ("cannot-divide" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Divide Left Right Quotient) : ...

Right Quotient where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "/")) =>
  instance (Divide None Right Quotient) : ...

-- Divide two numbers, returning the remainder.
@(language : "remainder")
Remainder : (Left : Number) (Right : Number) (infer Remainder) => trait (Left Right -> Remainder)
instance (Remainder Number Number Number) : left right -> intrinsic "remainder-number" left right

Left Right Remainder where (Error ("cannot-remainder" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Remainder Left Right Remainder) : ...

Right Remainder where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "%")) =>
  instance (Remainder None Right Remainder) : ...

-- Raise one number to the power of the other number.
@(language : "power")
Power : (Left : Number) (Right : Number) (infer Power) => trait (Left Right -> Power)
instance (Power Number Number Number) : left right -> intrinsic "power-number" left right

Left Right Power where (Error ("cannot-power" ; Error-Data "left" Left ; Error-Data "right" Right)) =>
  default instance (Power Left Right Power) : ...

Right Power where (Error ("missing-parentheses-around-operator" ; Error-Data "operator" "^")) =>
  instance (Power None Right Power) : ...

-- Round down a number to the nearest integer.
floor :: Number -> Number
floor : n -> intrinsic "floor-number" n

-- Round up a number to the nearest integer.
ceil :: Number -> Number
ceil : n -> intrinsic "ceil-number" n

-- Calculate the square root of a number.
sqrt :: Number -> Number
sqrt : n -> intrinsic "sqrt-number" n

-- An angle represented in degrees.
Angle : type Number

instance (Describe-Type Angle "angle")

-- An angle in degrees.
@(highlight-category : "unit")
degrees :: Number -> Angle
degrees : Angle

_ where (Error "missing-unit-for-angle") =>
  instance (Mismatch Number Angle)

-- Calculate the sine of an angle.
sin :: Angle -> Number
sin : (Angle degrees) -> intrinsic "sin" degrees

-- Calculate the cosine of an angle.
cos :: Angle -> Number
cos : (Angle degrees) -> intrinsic "cos" degrees

-- Calculate the tangent of an angle.
tan :: Angle -> Number
tan : (Angle degrees) -> intrinsic "tan" degrees

-- Negate the sign of a number.
negate :: Number -> Number
negate : n -> intrinsic "negate-number" n

-- Check if the first number is divisible by the second.
divisible-by? :: Number -> Number -> Boolean
divisible-by? : right -> left -> left % right = 0
