---
previous:
  name: Making music
  link: ?lesson=intermediate/making-music
next:
  name: Making your own types
  link: ?lesson=intermediate/custom-types
---

---
id: 08ws5pTb
type: text
locked: true
---

# The type system

Underlying the Wipple programming language is an advanced algorithm called the **type system**. Wipple uses the type system to determine what you mean, and that influences how the code is run. For example, if we `prompt` the user for a number...

---
id: 3gU9xu-0
type: code
---

n : prompt "Enter a number"
show (format "The next number after _ is _" n (n + 1))

---
id: IPvAClCM
type: text
locked: true
---

...you'll notice that we can only type numbers into the text box, because it only makes sense to add `1` to a number. So how does it _know?_

Essentially, the type system works by giving every piece of code a **type**, which represents the "kind of thing" that code produces. Types begin with a capital letter, and in the same way variables are denoted with a single colon `:`, types are denoted with a double colon `::`. So we can say that `1` is a `Number`, or `1 :: Number`. Likewise, `"hello" :: Text`.

Let's try making a mistake and see if Wipple catches it:

---
id: DY9x04Kf
type: code
lint: false
---

"hello" :: Number

---
id: G-13EK6B
type: text
locked: true
---

If you hover over the highlighted piece of code, you'll see "expected `Number`, but found `Text`"! Why? Well, we've told Wipple that `"hello"` is a number, but Wipple determined that it's actually text. Whenever there's a mismatch, Wipple issues an error.

Sometimes you might get an error that says "could not determine the type of this expression". All that means is that you did something Wipple's algorithm couldn't figure out on its own, and you need to manually specify the type. You can do that with `::` as shown above!

But how does Wipple know that `n` is a `Number` in `n + 1`? Well, the full explanation is its own Advanced lesson, but for now, just know that Wipple keeps track of all the variables and how they are used throughout the program. When you pass a variable to a function or an operator like `+`, Wipple looks through the code of the function and infers what the input must be. If you use a single variable in two places that require different types, you'll get an error — a variable can't hold both a number and a piece of text at the same time!

Types are also used to enforce providing units for numbers, like in the turtle graphics:

---
id: ruVsELA8
type: code
---

use "turtle"

with-turtle {
    forward 50 -- replace with `(50 pixels)` to fix the error
}

---
id: Uf9c2K-W
type: text
locked: true
---

There are many types built in to Wipple — here are a few:

  -  `Number` and `Text` represent numbers and text
  -  In `turtle`, `Pixels` represents a number of `pixels`
  -  In `music`, `Note-Length` represents a note length in `beats` or `secs`
  -  `List` represents a list of items
  -  `()` represents "nothing"

By the way, you can hover your mouse over any piece of code and the Wipple Playground will show you its type. There are many other types, particularly `->` for functions, that are covered in the Advanced lessons, so don't worry if you see a type you aren't familiar with yet!

In the next lesson, we'll learn how to make our own types!
