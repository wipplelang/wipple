---
id: tXj4_f5q
type: text
locked: true
---

# How to use `infer`

`infer` can be applied to a type parameter to indicate that it should be inferred from the other type parameters. Usually, the type checker determines the types of type parameters from the type of the expression provided at the use site, and then checks to make sure any bounds are satisfied. `infer` reverses this process â€”Â it determines the type of the type parameter marked `infer` from any bounds, and then checks to make sure this type matches the type at the use site. `infer` doesn't change the behavior of valid code, but it can produce better error messages for invalid code.

Use `infer` on type parameters that should depend on the types of other type parameters. For example, the `Element` type parameter used in the various sequence traits and functions is marked `infer` because it depends on the type of `Collection`. The math traits also use `infer` on the result type.

Notice the improved error message when `infer` is used in the example below:

---
id: BaEkY6iP
type: code
---

-- This is a list of numbers...
my-list : 1 , 2 , 3

-- ...but this function accepts text
accepts-text :: Text -> ()
accepts-text : ...

-- Without `infer`, the error message marks the bound as the issue
uninferred-each :: Container Element where (As-Sequence Container Element) => (Element -> ()) -> Container -> ()
uninferred-each : ...

my-list . uninferred-each accepts-text

-- With `infer`, the error message marks the input as the issue
inferred-each :: Container (infer Element) where (As-Sequence Container Element) => (Element -> ()) -> Container -> ()
inferred-each : ...

my-list . inferred-each accepts-text

---
id: hRKDx_Mo
type: text
locked: true
---

Because inferred type parameters are determined solely by the other types present, `instance`s of traits cannot have different inferred type parameters when the other types are the same. For example, this doesn't compile:

---
id: fdX2kqIt
type: code
---

Foo : A (infer B) => trait

instance (Foo Number Number)
instance (Foo Number Text)
