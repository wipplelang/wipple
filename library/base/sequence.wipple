-- A container for a sequence that produces the next value on demand.
Sequence : Element => type ({Maybe Element})

-- Retrieve the next item in a sequence.
@(highlight-category : "sequence")
@(highlight-icon : "arrow-forward")
next :: Element => (Sequence Element) -> Maybe Element
next : (Sequence next) -> do next

-- Produce an infinite sequence.
@(highlight-category : "sequence")
@(highlight-icon : "list")
sequence :: Element => {Element} -> Sequence Element
sequence : next -> Sequence {Has (do next)}

-- Create a sequence that always produces the provided element.
--
-- ## Example
--
-- ```wipple
-- my-sequence : always "Hello, world!"
-- show (next my-sequence) -- Hello, world!
-- show (next my-sequence) -- Hello, world!
-- show (next my-sequence) -- Hello, world!
-- ```
@(highlight-category : "sequence")
@(highlight-icon : "all-inclusive")
always :: Element => Element -> Sequence Element
always : element -> Sequence {Has element}

-- Create a sequence that produces the provided element a certain number of
-- times. `element . replicate n` is equivalent to `always element . take n`.
@(highlight-category : "sequence")
@(highlight-icon : "repeat")
replicate :: Element => Number -> Element -> Sequence Element
replicate : n -> element -> always element . take n

-- Build a sequence from an initial item and a transform function.
@(highlight-category : "sequence")
@(highlight-icon : "function")
build-sequence :: Element => (Maybe Element) (Element -> Maybe Element) -> Sequence Element
build-sequence : initial transform -> do {
  next : initial

  Sequence {
    when next {
      Has current -> do {
        next! : transform current
        Has current
      }
      Empty -> Empty
    }
  }
}

-- Convert a collection into a sequence.
As-Sequence : Container (infer Element) => trait (Container -> Sequence Element)
Container (infer Element) where (Error ("Can't make a sequence from _" Container ; Error-Description ("You can't use _ as a sequence. Try using a list instead." Container))) =>
  default instance (As-Sequence Container Element) : ...

Element => instance (As-Sequence (Sequence Element) Element) : sequence -> sequence

Element => instance (As-Sequence (Maybe Element) Element) : maybe -> Sequence {
  when maybe {
    Has value -> do {
      maybe! : Empty
      Has value
    }
    Empty -> Empty
  }
}

-- Transform each item in a sequence, producing a new sequence.
@(highlight-category : "sequence")
@(highlight-icon : "category")
transform :: Container (infer Element) Result where (As-Sequence Container Element) => (Element -> Result) -> Container -> Sequence Result
transform : f -> container -> do {
  base : As-Sequence container

  Sequence {
    when (next base) {
      Has value -> Has (f value)
      Empty -> Empty
    }
  }
}

-- Keep only the items in the sequence that satisfy the provided condition.
@(highlight-category : "sequence")
@(highlight-icon : "filter-alt")
filter :: Container (infer Element) where (As-Sequence Container Element) => (Element -> Boolean) -> Container -> Sequence Element
filter : include? -> container -> do {
  base : As-Sequence container

  Sequence {
    repeat with-control-flow {
      when (next base) {
        Has value -> if (include? value) {Stop (Has value)} {Continue None}
        Empty -> Stop Empty
      }
    }
  }
}

-- Transform each item in a sequence, keeping only the items that aren't `Empty`.
@(highlight-category : "sequence")
@(highlight-icon : "filter-alt")
filter-by :: Container (infer Element) Result where (As-Sequence Container Element) => (Element -> Maybe Result) -> Container -> Sequence Result
filter-by : transform -> container -> do {
  base : As-Sequence container

  Sequence {
    repeat with-control-flow {
      when (next base) {
        Has value -> when (transform value) {
          Has value -> Stop (Has value)
          Empty -> Continue None
        }
        Empty -> Stop Empty
      }
    }
  }
}

-- Flatten a sequence of sequences.
@(highlight-category : "sequence")
@(highlight-icon : "function")
flatten :: Outer (infer Inner) (infer Element) where (As-Sequence Outer Inner) (As-Sequence Inner Element) => Outer -> Sequence Element
flatten : outer -> do {
  outer : As-Sequence outer

  when (next outer) {
    Has inner -> do {
      inner : As-Sequence inner

      Sequence {
        repeat with-control-flow {
          when (next inner) {
            Has value -> Stop (Has value)
            Empty -> when (next outer) {
              Has next-inner -> do {
                inner! : As-Sequence next-inner
                Continue None
              }
              Empty -> Stop Empty
            }
          }
        }
      }
    }
    Empty -> Sequence {Empty}
  }
}

-- Find the first item in a sequence that can be transformed into a `Has` value.
@(highlight-category : "sequence")
@(highlight-icon : "search")
find-by :: Collection (infer Element) Result where (As-Sequence Collection Element) => (Element -> Maybe Result) -> Collection -> Maybe Result
find-by : f -> collection -> do {
  base : As-Sequence collection

  repeat with-control-flow {
    when (next base) {
      Has element -> when (f element) {
        Has result -> Stop (Has result)
        Empty -> Continue None
      }
      Empty -> Stop Empty
    }
  }
}

-- Reduce a sequence down to a single item.
@(highlight-category : "sequence")
@(highlight-icon : "function")
reduce :: Container (infer Element) Result where (As-Sequence Container Element) => Result (Element -> Result -> Result) -> Container -> Result
reduce : result f -> container -> do {
  helper :: Element Result => Result (Element -> Result -> Result) -> (Sequence Element) -> Result
  helper : result f -> sequence -> when (next sequence) {
    Has next -> (helper (result . f next) f) sequence
    Empty -> result
  }

  As-Sequence container . helper result f
}

-- Find the sum of all the numbers in a sequence.
@(highlight-category : "sequence")
@(highlight-icon : "calculate")
sum :: Container (infer N) where (As-Sequence Container N) (Initial N) (Add N N N) => Container -> N
sum : reduce Initial (next -> result -> result + next)

From-Sequence : Element Container => trait ((Sequence Element) -> Container)

Element Container where (Error ("Can't create _ from items that are _" Container Element ; Error-Description ("You can't use `collect` to create _ from these items." Container))) =>
  default instance (From-Sequence Element Container) : ...

-- Collect a sequence into a single container, like a list.
@(highlight-category : "sequence")
@(highlight-icon : "list-alt")
collect :: Input (infer Element) (Output : List Element) where (As-Sequence Input Element) (From-Sequence Element Output) => Input -> Output
collect : collection -> From-Sequence (As-Sequence collection)

Element => instance (From-Sequence Element (List Element)) : sequence -> do {
  list : (,)

  repeat with-control-flow {
    when (next sequence) {
      Has value -> do {
        list! : list . append value
        Continue None
      }
      Empty -> Stop None
    }
  }

  list
}

Element => instance (As-Sequence (List Element) Element) : list -> do {
  index : 0

  Sequence {
    when (list . nth index) {
      Has element -> do {
        index! : index + 1
        Has element
      }
      Empty -> Empty
    }
  }
}

instance (From-Sequence None None) : sequence -> repeat with-control-flow {
  when (next sequence) {
    Has None -> Continue None
    Empty -> Stop None
  }
}

-- Perform an action for each item in a sequence.
@(highlight-category : "sequence")
@(highlight-icon : "checklist")
each :: Container (infer Element) where (As-Sequence Container Element) => (Element -> None) -> Container -> None
each : action -> container -> container . transform action . collect

-- Split a sequence into groups of consecutive items satisfying a condition.
@(highlight-category : "sequence")
@(highlight-icon : "arrow-split")
split-by :: Collection (infer Element) where (As-Sequence Collection Element) => (Element -> Boolean) -> Collection -> Sequence (List Element)
split-by : separator -> collection -> do {
  base : As-Sequence collection
  group : Has (,)

  Sequence {
    repeat with-control-flow {
      when (next base) {
        Has x -> do {
          if (separator x) {
            result : group
            group! : Empty
            Stop result
          } {
            inner : when group {
              Has inner -> inner
              Empty -> (,)
            }

            group! : Has (inner . append x)

            Continue None
          }
        }
        Empty -> do {
          result : group
          group! : Empty
          Stop result
        }
      }
    }
  }
}

-- Split a sequence into groups of consecutive items equal to a value.
@(highlight-category : "sequence")
@(highlight-icon : "arrow-split")
split :: Collection (infer Element) where (As-Sequence Collection Element) (Equal Element) => Element -> Collection -> Sequence (List Element)
split : separator -> split-by (item -> item = separator)

-- Count the number of items in a sequence.
@(highlight-category : "sequence")
@(highlight-icon : "123")
count :: Collection (infer Element) where (As-Sequence Collection Element) => Collection -> Number
count : collection -> do {
  sequence : As-Sequence collection

  count : 0
  repeat with-control-flow {
    when (next sequence) {
      Has _ -> do {
        count! : count + 1
        Continue None
      }
      Empty -> Stop count
    }
  }
}

-- Collect two sequences into a single value.
@(highlight-category : "sequence")
@(highlight-icon : "merge-type")
join :: A B (infer Element) (C : A) where (As-Sequence A Element) (As-Sequence B Element) (From-Sequence Element C) => A B -> C
join : a b -> collect (flatten ((,) . append (As-Sequence a) . append (As-Sequence b)))

-- Take up to a fixed number of values from a sequence.
@(highlight-category : "sequence")
@(highlight-icon : "low-priority")
take :: Collection (infer Element) where (As-Sequence Collection Element) => Number -> Collection -> Sequence Element
take : count -> collection -> do {
  base : As-Sequence collection

  counter : 0
  Sequence {
    if (counter >= count) {
      Empty
    } {
      counter! : counter + 1
      next base
    }
  }
}

-- Find the first item in a sequence that satisfies a condition.
@(highlight-category : "sequence")
@(highlight-icon : "search")
find :: Collection (infer Element) where (As-Sequence Collection Element) => (Element -> Boolean) -> Collection -> Maybe Element
find : found? -> collection -> do {
  sequence : As-Sequence collection

  repeat with-control-flow {
    when (next sequence) {
      Has element -> if (found? element) {Stop (Has element)} {Continue None}
      Empty -> Stop Empty
    }
  }
}

-- Find the position of the first item in a sequence that satisfies a condition.
@(highlight-category : "sequence")
@(highlight-icon : "search")
find-position :: Collection (infer Element) where (As-Sequence Collection Element) => (Element -> Boolean) -> Collection -> Maybe Number
find-position : found? -> collection -> do {
  sequence : As-Sequence collection
  counter : 0

  repeat with-control-flow {
    when (next sequence) {
      Has element -> if (found? element) {
        Stop (Has counter)
      } {
        counter! : counter + 1
        Continue None
      }
      Empty -> Stop Empty
    }
  }
}

-- Returns `True` if the condition is `True` for all items in the sequence, or if the sequence is empty.
@(highlight-category : "sequence")
@(highlight-icon : "help")
all? :: Collection (infer Element) where (As-Sequence Collection Element) => (Element -> Boolean) -> Collection -> Boolean
all? : condition? -> collection -> do {
  helper :: Element => (Element -> Boolean) -> (Sequence Element) -> Boolean
  helper : condition? -> sequence -> when (next sequence) {
    Has element -> condition? element and (helper condition?) sequence
    Empty -> True
  }

  As-Sequence collection . helper condition?
}

-- Returns `True` if the condition is `True` for any item in the sequence, or `False` if the sequence is empty.
@(highlight-category : "sequence")
@(highlight-icon : "help")
any? :: Collection (infer Element) where (As-Sequence Collection Element) => (Element -> Boolean) -> Collection -> Boolean
any? : condition? -> collection -> do {
  helper :: Element => (Element -> Boolean) -> (Sequence Element) -> Boolean
  helper : condition? -> sequence -> when (next sequence) {
    Has element -> condition? element or (helper condition?) sequence
    Empty -> False
  }

  As-Sequence collection . helper condition?
}

-- Create a sequence that takes values from two sequences at a time until either sequence runs out.
@(highlight-category : "sequence")
@(highlight-icon : "sync-alt")
zip :: Left (infer Left-Element) Right (infer Right-Element) where (As-Sequence Left Left-Element) (As-Sequence Right Right-Element) => Left Right -> Sequence (Left-Element ; Right-Element)
zip : left right -> do {
  left : As-Sequence left
  right : As-Sequence right

  Sequence {
    when (next left ; next right) {
      (Has a ; Has b) -> Has (a ; b)
      _ -> Empty
    }
  }
}

-- Create a sequence that maintains a counter indicating the number of elements
-- produced. For example, `enumerate ("a" , "b" , "c")` produces `(0 ; "a")`,
-- `(1 ; "b")`, and `(2 ; "c")`.
@(highlight-category : "sequence")
@(highlight-icon : "123")
enumerate :: Collection (infer Element) where (As-Sequence Collection Element) => Collection -> Sequence (Number ; Element)
enumerate : collection -> zip (0 to undefined by 1) collection

Extend : Container (infer Element) => trait ((Sequence Element) -> Container -> Container)
Element => instance (Extend (List Element) Element) : sequence -> list -> sequence . reduce list append

-- Append the contents of a sequence to a collection.
@(highlight-category : "sequence")
@(highlight-icon : "library-add")
extend :: From Container (infer Element) where (As-Sequence From Element) (Extend Container Element) => From -> Container -> Container
extend : collection -> Extend (As-Sequence collection)

Left (infer Left-Element) Right (infer Right-Element) where (Extend Left Left-Element) (Extend Right Right-Element) => instance (Extend (Left ; Right) (Left-Element ; Right-Element)) : sequence -> (left ; right) -> do {
  repeat with-control-flow {
    when (next sequence) {
      Has (a ; b) -> do {
        left! : left . extend (Has a)
        right! : right . extend (Has b)
        Continue None
      }
      Empty -> Stop None
    }
  }

  left ; right
}

-- Split a sequence that produces two values at a time into two separate collections.
@(highlight-category : "sequence")
@(highlight-icon : "sync-alt")
unzip :: Collection (infer Left-Element) (infer Right-Element) Left Right where (As-Sequence Collection (Left-Element ; Right-Element)) (Extend Left Left-Element) (Extend Right Right-Element) (Initial Left) (Initial Right) => Collection -> (Left ; Right)
unzip : collection -> (Initial ; Initial) . extend (As-Sequence collection)

Container : Collection (infer Element) => trait (Element -> Collection -> Boolean)

-- Returns `True` if the collection contains the element.
@(highlight-category : "sequence")
@(highlight-icon : "help")
contains? :: Collection (infer Element) where (Container Collection Element) => Element -> Collection -> Boolean
contains? : Container

Element where (Equal Element) => instance (Container (List Element) Element) : target -> list -> do {
  sequence : As-Sequence list

  repeat with-control-flow {
    when (next sequence) {
      Has element -> if (element = target) {Stop True} {Continue None}
      Empty -> Stop False
    }
  }
}

instance (Add Text Text Text) : a b -> "__" a b

instance (As-Sequence Text Text) : text ->
  As-Sequence (intrinsic "text-characters" text :: List Text)

instance (From-Sequence Text Text) : reduce "" (right -> left -> left + right)
