[[no-std]]

use "mutable"
use "async"

Control-Flow : A => type {
  Break A
  Continue
}

loop' :: A => (() -> Control-Flow A) -> A
loop' : body -> when (body ()) {
  Break value -> value
  Continue -> loop' body
}

[help "Execute code repeatedly until it evaluates to `Break`."]
[help-group "Control Flow"]
[keyword]
loop : syntax { loop 'body -> loop' (() -> 'body) }

[help "Execute code repeatedly so long as the input is `True`."]
[help-group "Control Flow"]
[keyword]
while : syntax {
  while 'condition 'body -> loop {
    if 'condition {
      'body
      Continue :: Control-Flow ()
    } { Break () }
  }
}

[help "Execute code repeatedly so long as the input is `False`."]
[help-group "Control Flow"]
[keyword]
unless : syntax { unless 'condition 'body -> while (not 'condition) 'body }

[help "Execute code repeatedly until the program exits."]
[help-group "Control Flow"]
[keyword]
forever : syntax {
  forever 'body -> loop {
    'body :: ()
    Continue
  }
}

[help "Execute code repeatedly with a delay between each repetition."]
[help-group "Control Flow"]
[keyword]
loop-every : syntax {
  loop-every 'duration 'body -> loop {
    when 'body {
      Continue -> {
        delay 'duration
        Continue
      }
      Break value -> Break value
    }
  }
}
