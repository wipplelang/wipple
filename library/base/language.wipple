-- Assign a value to a variable.
--
-- The `:` operator is used to assign a value to a variable so that it may be
-- referred to later in the program:
--
-- ```wipple
-- sum : 1 + 2
-- show sum -- 3
-- ```
--
-- You can declare two variables with the same name, and the newer variable will
-- "shadow" the older variable, meaning the older variable cannot be accessed
-- anymore within the current scope. The older variable does remain accessible
-- inside blocks and functions that captured it before it was shadowed:
--
-- ```wipple
-- greeting : "Hello"
-- show-greeting : {show greeting}
--
-- greeting : "Howdy"
-- show greeting -- Howdy
--
-- do show-greeting -- Hello
-- ```
intrinsic ":"

-- Define a function.
--
-- The `->` operator is used to create functions. The inputs go on the left, and
-- the output goes on the right:
--
-- ```wipple
-- add : a b -> a + b
-- show (add 1 2) -- 3
-- ```
-- The `->` operator is also commonly used inside `when` to specify a pattern to
-- match and the code to run if the pattern matches:
--
-- ```wipple
-- Grade : type {
--   A
--   B
--   C
--   D
--   F
-- }
--
-- report-card : grade -> when grade {
--     A -> "top of the class"
--     B -> "good job"
--     C -> "need to study"
--     D or F -> "didn't pass"
-- }
--
-- show (report-card A) -- top of the class
-- ```
intrinsic "->"

-- Annotate the type of a value.
--
-- Before running your code, Wipple needs to know what kind of data that code
-- will produce when it runs — for example, a number or a piece of text. That
-- way, Wipple can tell the computer how much space it needs in its memory to
-- store the data. A **type** is a description of that data, and begins with a
-- capital letter — for example, `Number` represents a numeric piece of data,
-- and `Text` represents a list of characters. All pieces of code must be
-- assigned a type in Wipple.
--
-- Most of the time, Wipple can figure out the type of your code automatically —
-- if you have `pi : 3.14`, for example, then `pi` will be given the type
-- `Number` automatically. But in some cases, there isn't enough information for
-- Wipple to determine the type, and that's what the `::` operator is for.
--
-- The `::` operator allows you to explicitly define the type of a variable or
-- expression:
--
-- ```wipple
-- pi : (3.14 :: Number)
-- ```
--
-- You can also put the `::` on its own line:
--
-- ```wipple
-- pi :: Number
-- pi : 3.14
-- ```
--
-- When you write `pi :: Number` on its own line, `pi` is represented as a
-- **constant** instead of a variable. This means you can access `pi` from
-- anywhere in your program, not just after its definition. As a result, `pi`'s
-- value is computed every time you refer to `pi`. This isn't usually a problem
-- because most constants produce numbers, functions, or other values that don't
-- directly change, but it's important to keep this behavior in mind when
-- defining constants with side effects (eg. displaying a message on the screen
-- or returning a random number).
--
-- Constants may also be **generic** using type functions — see the
-- documentation for `=>` to learn more.
intrinsic "::"

-- Define a type function.
--
-- Type functions are conceptually similar to functions defined using `->`, but
-- instead of operating on values, they accept and produce **types**. You use
-- `=>` in combination with a `type`, `trait`, `instance`, or constant
-- definition to make the definition **generic**:
--
-- ```wipple
-- identity :: Value => Value -> Value
-- identity : x -> x
--
-- show (identity 5) -- 5
-- show (identity "Hello!") -- Hello
-- show ((identity identity) True) -- True (works with functions, too!)
-- ```
--
-- You can use `where` to add constraints on the input types using traits. See
-- the documentation for `where` and `trait` for more information.
--
-- ```wipple
-- add :: Left Right Sum where (Add Left Right Sum) => Left Right -> Sum
-- add : a b -> a + b
-- ```
intrinsic "=>"

@(language : "none")
None : type

@(language : "number")
Number : type intrinsic

@(language : "text")
Text : type intrinsic

Maybe : Value => type {
  Empty
  Has Value
}

@(language : "as")
As : Input Output => trait (Input -> Output)

Input Output where (Error ("cannot-convert" ; Error-Data "input" Input ; Error-Data "output" Output)) =>
  default instance (As Input Output) : ...

Value => instance (As Value Value) : value -> value

error :: (Value : None) => Text -> Value
error : message -> intrinsic "crash" message

... :: Value => Value
... : error "not implemented"

assert :: Text -> Boolean -> None
assert : message -> condition -> if condition {None} {error message}

unreachable :: Value => Value
unreachable : error "unreachable"

-- Represents the default or initial value of a type.
Initial : Value => trait Value

Value where (Error ("no-initial-value" ; Error-Data "value" Value)) =>
  default instance (Initial Value) : ...

instance (Initial Number) : 0
instance (Initial Text) : ""
instance (Initial Boolean) : False
Value => instance (Initial (Maybe Value)) : Empty

-- Send a message to the runtime.
runtime-message :: Input (Output : None) => Text Input -> Output
runtime-message : message data -> intrinsic "runtime-message" message data

-- Generate a compile-time error with the provided information. You may provide
-- a single message, or a tuple with multiple pieces of information. Valid types
-- for this tuple include text (representing the identifier of the error message
-- template), `Error-Data`, and `Error-Location`.
--
-- ## Example
--
-- ```wipple
-- -- Display "cannot multiply two pieces of text" rather than
-- -- "this code requires `(Multiply Text Text)`"
-- (infer Output) where (Error "invalid-multiply-text") =>
--   instance (Multiply Text Text Output) : unreachable
-- ```
@(language : "error")
Error : Info => trait
Info => instance (Error Info)

-- Change the location of a compile-time error generated by the `Error` trait.
-- `Type` should be a type parameter — the error will have the location of the
-- first expression with this type.
@(language : "error-location")
Error-Location : Type => type intrinsic

-- Associate additional data with the error that its message template can use.
@(language : "error-data")
Error-Data : Key Value => type intrinsic

-- When used in an instance, always displays at the location of the value that
-- requested the instance. This can be used with `Error-Location`, as well as
-- `Error-Fix` to insert the source code in the fix.
@(language : "source")
Source : type intrinsic

-- Whenever two types are incompatible, the compiler will resolve this trait
-- to display a custom error message generated by `Error`. You can define
-- instances of `Mismatch` to provide custom error messages when your type is
-- expected, but the code provides a value of a different type. (If no instance
-- matches, the compiler will display a default error message.) This trait is
-- useful when you have two concrete types that mismatch, since without type
-- parameters you don't have access to location information.
--
-- ## Example
--
-- ```wipple
-- _ where (Error "expected-unit") =>
--   instance (Mismatch Distance Number) : ...
-- ```
@(language : "mismatch")
Mismatch : Actual Expected => trait

-- Whenever a value is unused, the compiler will resolve this trait to display a
-- custom error message generated by `Error`. You can define instances of
-- `Unused` to provide custom error messages if your value is supposed to be
-- assigned to a variable or passed to a function.
@(language : "unused")
Unused : Type => trait

-- Provide a text description of a type for use in error messages.
@(language : "describe-type")
Describe-Type : Type (infer Description) => trait

-- Prevent Wipple from modifying the provided text to agree with the grammar of
-- the surrounding text (eg. by inserting an article like "a" or "an").
@(language : "no-grammar")
No-Grammar : Message => type

instance (Describe-Type None (No-Grammar "no value"))
instance (Describe-Type Number "number")
instance (Describe-Type Text (No-Grammar "text"))
Input Output => default instance (Describe-Type (Input -> Output) "function")
Body => default instance (Describe-Type {Body} "block")
Value => default instance (Describe-Type (Maybe Value) "maybe")

-- Display a dropdown with the provided options. The dropdown will evaluate to
-- the selected item at runtime.
@ignore-naming-conventions
Dropdown :: Value => (List Value) Value -> Value
Dropdown : _ selection -> selection

-- Display a slider with the provided value, minimum, and maximum.
@ignore-naming-conventions
Slider :: (Value : Number) where (As Number Value) => Number Number Number -> Value
Slider : current _ _ -> current as Value
