Music : type {
    tempo :: {Number}
    set-tempo :: Number -> Unit
}

@once
instrument-key :: Task-Local-Key Instrument
instrument-key : task-local-key

@once
music :: Music
music : do {
    (set-task-local instrument-key) (load-instrument "acoustic_grand_piano")

    tempo : 120
    Music {
        tempo : {tempo}
        set-tempo : new-tempo -> do {
            tempo! : new-tempo
        }
    }
}

-- Set the tempo of the music.
@(highlight-category : "control-flow")
@(highlight-icon : "speed")
tempo :: Number -> Unit
tempo : tempo -> do {
    { set-tempo : set-tempo } : music
    set-tempo tempo
}

-- A note length.
Note-Length : type {
    ms-from-tempo :: Number -> Number
}

instance (Describe-Type Note-Length "a note length in `beats`")

-- Specify how many beats a note or rest should last.
@(highlight-category : "unit")
beats :: Number -> Note-Length
beats : beats -> Note-Length {
    ms-from-tempo : tempo -> 60000 / tempo * beats
}

-- A note.
Note : type Text

instance (Describe-Type Note "a note")

-- Play a note on an instrument.
@(highlight-category : "music-play")
@(highlight-icon : "music-note")
note :: Note Note-Length -> Unit
note : note length -> chord (note ,) length

-- Play multiple notes on an instrument at the same time.
@(highlight-category : "music-play")
@(highlight-icon : "music-note")
chord :: (List Note) Note-Length -> Unit
chord : notes { ms-from-tempo : ms-from-tempo } -> do {
    { tempo : tempo } : music

    {
        name : instrument-name
        delta : delta
        set-delta : set-delta
    } : current-instrument

    delta : do delta
    ms : ms-from-tempo (do tempo) - delta

    notes : notes
        . transform ((Note value) -> value)
        . collect :: List _

    delta : with-continuation (continuation ->
        runtime-message "notes" (instrument-name ; ms ; notes ; delta -> continuation delta))

    delta >= 0 . assert "music stopped"
    set-delta delta
}

-- Rest for a period of time.
@(highlight-category : "music-play")
@(highlight-icon : "music-off")
rest :: Note-Length -> Unit
rest : length -> chord (,) length

Instrument : type {
  name :: Text
  delta :: {Number}
  set-delta :: Number -> Unit
}

load-instrument :: Text -> Instrument
load-instrument : name -> do {
    runtime-message "load-instrument" name

    delta : 0
    Instrument {
        name : name
        delta : {delta}
        set-delta : new-delta -> do {
            delta! : new-delta
        }
    }
}

current-instrument :: Instrument
current-instrument : task-local instrument-key or error "no instrument set"

Instrument-Name : type Text

instance (Describe-Type Instrument-Name "an instrument name")

-- Change the instrument.
@(highlight-category : "music-instrument")
@(highlight-icon : "piano")
instrument :: (Body : ()) => Instrument-Name {Body} -> Unit
instrument : (Instrument-Name name) body -> in-background {
    (set-task-local instrument-key) (load-instrument name)
    _ : do body
}
