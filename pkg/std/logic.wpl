[[no-std]]

[language "boolean"]
[help "Represents either `True` or `False`."]
Boolean : type {
	False
	True
}

use Boolean

[keyword]
if : bool then else ~> when bool {
	False -> else
	True -> then
}

[keyword]
if? : bool then ~> if bool then ()

[help "Returns `False` if provided `True`, and vice versa."]
not :: Boolean -> Boolean
not : bool -> if bool False True

And : Left Right Output => trait (Left -> (() -> Right) -> Output)
and : conjunction operator (a b ~> And a (() -> b))
instance (And Boolean Boolean Boolean) : a? -> b? -> if a? (b? ()) False

Or : Left Right Output => trait (Left -> (() -> Right) -> Output)
-- `or` operator is defined in the compiler to accommodate `or` patterns
instance (Or Boolean Boolean Boolean) : a? -> b? -> if a? True (b? ())

[help "The result of a comparison between two values."]
Ordering : type {
	Less
	Equal
	Greater
}

[help "Implement this trait to enable comparisons between two values of your type."]
Order : A => trait (A -> A -> Ordering)

instance (Order Number) : a -> b -> external "runtime" "number-ordering" a b
instance (Order Integer) : a -> b -> external "runtime" "integer-ordering" a b
instance (Order Natural) : a -> b -> external "runtime" "natural-ordering" a b
instance (Order Byte) : a -> b -> external "runtime" "byte-ordering" a b
instance (Order Signed) : a -> b -> external "runtime" "signed-ordering" a b
instance (Order Unsigned) : a -> b -> external "runtime" "unsigned-ordering" a b
instance (Order Float) : a -> b -> external "runtime" "float-ordering" a b
instance (Order Double) : a -> b -> external "runtime" "double-ordering" a b

< : comparison operator (a b ~> when (Order a b) {
	Ordering Less -> True
	Ordering Equal -> False
	Ordering Greater -> False
})

> : comparison operator (a b ~> when (Order a b) {
	Ordering Less -> False
	Ordering Equal -> False
	Ordering Greater -> True
})

<= : comparison operator (a b ~> when (Order a b) {
	Ordering Less -> True
	Ordering Equal -> True
	Ordering Greater -> False
})

>= : comparison operator (a b ~> when (Order a b) {
	Ordering Less -> False
	Ordering Equal -> True
	Ordering Greater -> True
})

[help "Implement this trait to enable equality testing between two values of your type."]
Equal : A => trait (A -> A -> Boolean)
= : comparison operator (a b ~> Equal a b)
/= : comparison operator (a b ~> not (a = b))

instance (Equal Text) : a -> b -> external "runtime" "text-equality" a b
instance (Equal Number) : a -> b -> external "runtime" "number-equality" a b
instance (Equal Integer) : a -> b -> external "runtime" "integer-equality" a b
instance (Equal Natural) : a -> b -> external "runtime" "natural-equality" a b
instance (Equal Byte) : a -> b -> external "runtime" "byte-equality" a b
instance (Equal Signed) : a -> b -> external "runtime" "signed-equality" a b
instance (Equal Unsigned) : a -> b -> external "runtime" "unsigned-equality" a b
instance (Equal Float) : a -> b -> external "runtime" "float-equality" a b
instance (Equal Double) : a -> b -> external "runtime" "double-equality" a b
instance (Equal ()) : () -> () -> True
instance (Equal Boolean) : a? -> b? -> a? and b? or not a? and not b?

Numeric-Impl : N => type {
	zero :: N
}

Numeric : N => trait (Numeric-Impl N)

instance (Numeric Number) : Numeric-Impl {
	zero : 0
}

instance (Numeric Integer) : Numeric-Impl {
	zero : 0
}

instance (Numeric Natural) : Numeric-Impl {
	zero : 0
}

instance (Numeric Byte) : Numeric-Impl {
	zero : 0
}

instance (Numeric Signed) : Numeric-Impl {
	zero : 0
}

instance (Numeric Unsigned) : Numeric-Impl {
	zero : 0
}

instance (Numeric Float) : Numeric-Impl {
	zero : 0
}

instance (Numeric Double) : Numeric-Impl {
	zero : 0
}
