[[help-url "https://wipple.dev/doc/game.html"]]

Game : type { handle :: UI }

[context]
game :: Game
game : error "use of game engine outside `with-game`"

[help "Create a new game."]
[help-group "Game Engine"]
with-game : syntax {
  with-game 'body -> {
    with-ui "/playground/ui/game/index.js" (handle -> {
      -- TODO: Wait for play button if needed (add back "press any button to start")

      with (game : Game { handle }) {
        repeat {
          'body :: ()
          handle . message "commit" ()
          Continue
        } :: ()
      }
    })
  }
}

[help "The width of the game window."]
[help-group "Game Engine"]
width :: Number
width : 32

[help "The height of the game window."]
[help-group "Game Engine"]
height :: Number
height : 24

[help "Move the cursor to a particular x-y location."]
[help-group "Game Engine"]
locate :: (Number ; Number) -> ()
locate : (x ; y) -> handle of game . message "locate" (x as Number ; y as Number)

[help "Set the foreground color."]
[help-group "Game Engine"]
fg :: Text -> ()
fg : c -> handle of game . message "fg" c

[help "Set the background color."]
[help-group "Game Engine"]
bg :: Text -> ()
bg : c -> handle of game . message "bg" c

Glyph : type {
  Character-Glyph Text
  Numeric-Glyph Number
}

instance (As Text Glyph) : Character-Glyph
instance (As Number Glyph) : Numeric-Glyph

[help "Render a single glyph at the cursor's current position."]
[help-group "Game Engine"]
render-glyph :: A where (As A Glyph) => A -> ()
render-glyph : glyph -> {
  -- This works because JavaScript is dynamically typed
  when (glyph as Glyph) {
    Character-Glyph c -> handle of game . message "render-glyph" c
    Numeric-Glyph n -> handle of game . message "render-glyph" (n as Number)
  }
}

Glyph-Sequence : type {
  Text-Glyph-Sequence Text
  Numeric-Glyph-Sequence (List Number)
}

instance (As Text Glyph-Sequence) : Text-Glyph-Sequence
instance (As (List Number) Glyph-Sequence) : Numeric-Glyph-Sequence

[help "Render a line of glpyhs and advance to the next line."]
[help-group "Game Engine"]
render-line :: A where (As A Glyph-Sequence) => A -> ()
render-line : glyphs -> {
  -- This works because JavaScript is dynamically typed
  when (glyphs as Glyph-Sequence) {
    Text-Glyph-Sequence c -> handle of game . message "render-line" c
    Numeric-Glyph-Sequence n ->
      handle of game . message "render-line" (n . transform (c -> c as Number) . collect :: List _)
  }
}

[help "Render a line of glpyhs without advancing to the next line."]
[help-group "Game Engine"]
render :: A where (As A Glyph-Sequence) => A -> ()
render : glyphs -> {
  -- This works because JavaScript is dynamically typed
  when (glyphs as Glyph-Sequence) {
    Text-Glyph-Sequence c -> handle of game . message "render" c
    Numeric-Glyph-Sequence n ->
      handle of game . message "render" (n . transform (c -> c as Number) . collect :: List _)
  }
}

[help "Render a line of characters, replacing all non-whitespace characters with the specified glyph, and advance to the next line."]
[help-group "Game Engine"]
render-line-fill :: A where (As A Glyph) => Text -> A -> ()
render-line-fill : text replacement -> {
  -- This works because JavaScript is dynamically typed
  when (replacement as Glyph) {
    Character-Glyph c -> handle of game . message "render-line-fill" (text ; c)
    Numeric-Glyph n -> handle of game . message "render-line-fill" (text ; (n as Number))
  }
}

[help "Render a line of characters, replacing all non-whitespace characters with the specified glyph, without advancing to the next line."]
[help-group "Game Engine"]
render-fill :: A where (As A Glyph) => Text -> A -> ()
render-fill : text replacement -> {
  -- This works because JavaScript is dynamically typed
  when (replacement as Glyph) {
    Character-Glyph c -> handle of game . message "render-fill" (text ; c)
    Numeric-Glyph n -> handle of game . message "render-fill" (text ; (n as Number))
  }
}

[help "Information about the music being played by the game."]
[help-group "Game Engine"]
Music : type {
  song :: Text
  loop :: Boolean
}

[help "Play some music."]
[help-group "Game Engine"]
play :: Music -> ()
play : { song loop } -> {
  -- HACK: Can't send booleans to JavaScript
  loop : when loop {
    True -> 1
    False -> 0
  }

  handle of game . message "play" (song ; loop)
}

[help "Pause the music being played."]
[help-group "Game Engine"]
pause :: () -> ()
pause : () -> handle of game . message "pause" ()

Button : type { B A Y X L R Start Up Down Left Right }

[help "Get the button being pressed."]
[help-group "Game Engine"]
button :: () -> Maybe Button
button : () -> when (handle of game . message "button" ()) {
  32 -> Some B
  16 -> Some A
  128 -> Some Y
  64 -> Some X
  256 -> Some L
  512 -> Some R
  1024 -> Some Start
  1 -> Some Up
  2 -> Some Down
  4 -> Some Left
  8 -> Some Right
  _ -> None
}

[entrypoint]
entrypoint :: Entrypoint
entrypoint : program -> with-game { program () }
