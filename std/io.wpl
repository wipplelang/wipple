[[no-implicit-use]]

use "fp"
use "list"
use "logic"
use "util"
use "sequence"

[language "show"]
[help "Implement this trait to enable `show`ing values of your type."]
[help-group "Input and Output"]
[help-show-code]
[on-unimplemented ("cannot display _ on the screen" A)]
Show : (A : Text) => trait (A -> Text)

[help "Display a value on the screen."]
[help-group "Input and Output"]
[help-playground "https://wipple.dev/std/examples/show.txt"]
[diagnostic "accepts-text"]
[diagnostic-alias "print"]
[diagnostic-alias "println"]
[diagnostic-alias "display"]
[on-unresolved "`show` expects a value to be displayed"]
[resolve "insert a value to display" (show {%value%})]
show :: (A : Text) where (Show A) => A -> ()
show : x -> intrinsic "display" (Show x)

snippet "Show" : show 'value

instance (Show Text) : it
instance (Show Number) : n -> semantics "pure" (intrinsic "number-to-text" n)
instance (Show Integer) : n -> semantics "pure" (intrinsic "integer-to-text" n)
instance (Show Natural) : n -> semantics "pure" (intrinsic "natural-to-text" n)
instance (Show Byte) : n -> semantics "pure" (intrinsic "byte-to-text" n)
instance (Show Signed) : n -> semantics "pure" (intrinsic "signed-to-text" n)
instance (Show Unsigned) : n -> semantics "pure" (intrinsic "unsigned-to-text" n)
instance (Show Float) : n -> semantics "pure" (intrinsic "float-to-text" n)
instance (Show Double) : n -> semantics "pure" (intrinsic "double-to-text" n)
instance (Show Boolean) : x? -> if x? "True" "False"
instance (Show None-Error) : just "found `None`"

Value where (Show Value) => instance (Show (Maybe Value)) : x? -> when x? {
  Some x -> "Some _" (Show x)
  None -> "None"
}

Success Failure where (Show Success) (Show Failure) => instance (Show (Result Success Failure)) : x? -> when x? {
  OK x -> "OK _" x
  Error e -> "Error _" e
}

Success Failure where (Show Failure) => instance (Expect (Result Success Failure) Success) : message -> x? -> when x? {
  OK x -> x
  Error e -> error ("_: _" message e)
}

[help "Implement the `read` function."]
[help-group "Input and Output"]
Read : A => trait (Text -> Maybe A)

[help "Parse `Text` into a value."]
[help-group "Input and Output"]
read :: A where (Read A) => Text -> Maybe A
read : Read

instance (Read Text) : Some
instance (Read Number) : text -> semantics "pure" (intrinsic "text-to-number" text)
instance (Read Integer) : text -> semantics "pure" (intrinsic "text-to-integer" text)
instance (Read Natural) : text -> semantics "pure" (intrinsic "text-to-natural" text)
instance (Read Byte) : text -> semantics "pure" (intrinsic "text-to-byte" text)
instance (Read Signed) : text -> semantics "pure" (intrinsic "text-to-signed" text)
instance (Read Unsigned) : text -> semantics "pure" (intrinsic "text-to-unsigned" text)
instance (Read Float) : text -> semantics "pure" (intrinsic "text-to-float" text)
instance (Read Double) : text -> semantics "pure" (intrinsic "text-to-double" text)

[help-group "Input and Output"]
[help "Read a value from the user with the provided prompt."]
prompt :: A where (Read A) => Text -> A
prompt : prompt -> intrinsic "prompt" prompt (Read :: (Text -> Maybe A))

[help "Ask the user to pick from a set of options."]
[help-group "Input and Output"]
choice :: Element where (Show Element) => Text -> List Element -> Element
choice : prompt items -> {
  descriptions : items . transform Show . collect :: List Text
  index : intrinsic "choice" prompt descriptions
  items . nth index . unwrap
}
