// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`all-any.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`all-any.wipple 2`] = `
{
  "output": 
"True
False
True
True
"
,
}
`;

exports[`asset.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`asset.wipple 2`] = `
{
  "output": 
"red
"
,
}
`;

exports[`average.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`average.wipple 2`] = `
{
  "output": 
"5: {"type":"call"}: stack is empty
stack: [
    {
        "typeDescriptor": {
            "type": "function",
            "value": [
                {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                {
                    "type": "function",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Number",
                                                []
                                            ]
                                        },
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Number",
                                                []
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "named",
                                                "value": [
                                                    "type Number",
                                                    []
                                                ]
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "type": "function",
        "path": "constant reduce / constant helper",
        "ir": [
            [
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Element"
                                                },
                                                {
                                                    "type": "function",
                                                    "value": [
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        },
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "named",
                                                    "value": [
                                                        "type Sequence",
                                                        [
                                                            {
                                                                "type": "parameter",
                                                                "value": "constant reduce / constant helper / type-parameter Element"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [],
                                "constant reduce / constant helper",
                                1
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 0
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "parameter",
                                            "value": "constant reduce / constant helper / type-parameter Element"
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "named",
                                            "value": [
                                                "type Sequence",
                                                [
                                                    {
                                                        "type": "parameter",
                                                        "value": "constant reduce / constant helper / type-parameter Element"
                                                    }
                                                ]
                                            ]
                                        },
                                        {
                                            "type": "parameter",
                                            "value": "constant reduce / constant helper / type-parameter Result"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [],
                                "constant reduce / constant helper",
                                3
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 1
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                }
                            ]
                        },
                        {
                            "type": "function",
                            "value": [
                                [
                                    2,
                                    1,
                                    3,
                                    0,
                                    1,
                                    2,
                                    0
                                ],
                                "constant reduce / constant helper",
                                5
                            ]
                        }
                    ]
                },
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "initialize",
                    "value": 2
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Sequence",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "type": "named",
                                    "value": [
                                        "type Maybe",
                                        [
                                            {
                                                "type": "parameter",
                                                "value": "constant reduce / constant helper / type-parameter Element"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "constant",
                            "value": [
                                "constant next",
                                [
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Element"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                {
                    "type": "variable",
                    "value": 2
                },
                {
                    "type": "call"
                },
                {
                    "type": "jumpIfNot",
                    "value": [
                        "type Maybe / variant Some",
                        8
                    ]
                },
                {
                    "type": "element",
                    "value": 0
                },
                {
                    "type": "initialize",
                    "value": 3
                },
                {
                    "type": "drop"
                },
                {
                    "type": "drop"
                },
                {
                    "type": "typed",
                    "value": [
                        {
                            "type": "function",
                            "value": [
                                {
                                    "type": "parameter",
                                    "value": "constant reduce / constant helper / type-parameter Result"
                                },
                                {
                                    "type": "function",
                                    "value": [
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Element"
                                                },
                                                {
                                                    "type": "function",
                                                    "value": [
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        },
                                                        {
                                                            "type": "parameter",
                                                            "value": "constant reduce / constant helper / type-parameter Result"
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            "type": "function",
                                            "value": [
                                                {
                                                    "type": "named",
                                                    "value": [
                                                        "type Sequence",
                                                        [
                                                            {
                                                                "type": "parameter",
                                                                "value": "constant reduce / constant helper / type-parameter Element"
                                                            }
                                                        ]
                                                    ]
                                                },
                                                {
                                                    "type": "parameter",
                                                    "value": "constant reduce / constant helper / type-parameter Result"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "type": "constant",
                            "value": [
                                "constant reduce / constant helper",
                                [
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Element"
                                    },
                                    {
                                        "type": "parameter",
                                        "value": "constant reduce / constant helper / type-parameter Result"
                                    }
                                ]
                            ]
                        }
                    ]
                },
                {
                    "type": "variable",
                    "value": 1
                },
                {
                    "type": "variable",
                    "value": 3
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 0
                },
                {
                    "type": "call"
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 1
                },
                {
                    "type": "call"
                },
                {
                    "type": "variable",
                    "value": 2
                },
                {
                    "type": "call"
                },
                {
                    "type": "jump",
                    "value": 7
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ],
            [
                {
                    "type": "return"
                }
            ],
            [
                {
                    "type": "jumpIfNot",
                    "value": [
                        "type Maybe / variant None",
                        9
                    ]
                },
                {
                    "type": "drop"
                },
                {
                    "type": "variable",
                    "value": 0
                },
                {
                    "type": "jump",
                    "value": 7
                }
            ],
            [
                {
                    "type": "unreachable"
                }
            ]
        ],
        "label": 1,
        "substitutions": {
            "constant reduce / constant helper / type-parameter Element": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "constant reduce / constant helper / type-parameter Result": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            }
        },
        "scope": {},
        "tailCallable": true
    }
]
"
,
}
`;

exports[`bound.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`bound.wipple 2`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`bounds-are-one-way.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`T\`, or define a new instance for \`T\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/bounds-are-one-way.wipple",
        "message": "this code requires the instance \`T Number\` to exist, but there is no such instance",
        "span": {
          "end": 68,
          "start": 67,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`bounds-dont-influence-other-bounds.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so Wipple can check this code. One way to do this is by using \`::\` to explicitly annotate the type, but you can also try assigning this code to a variable and passing it to a function.",
      "primaryLabel": {
        "file": "test/tests/bounds-dont-influence-other-bounds.wipple",
        "message": "not enough information to determine the type of this code",
        "span": {
          "end": 198,
          "start": 197,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/bounds-dont-influence-other-bounds.wipple",
          "message": "this code produces a value of type \`(Number ; _)\`, where the \`_\` placeholders are unknown",
          "span": {
            "end": 198,
            "start": 197,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so only a single instance applies.",
      "primaryLabel": {
        "file": "test/tests/bounds-dont-influence-other-bounds.wipple",
        "message": "multiple instances for \`T\` could apply here",
        "span": {
          "end": 198,
          "start": 197,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/bounds-dont-influence-other-bounds.wipple",
          "message": "this instance could apply",
          "span": {
            "end": 71,
            "start": 42,
          },
        },
        {
          "file": "test/tests/bounds-dont-influence-other-bounds.wipple",
          "message": "this instance could apply",
          "span": {
            "end": 99,
            "start": 72,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`call-function-diagnostic.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "A pattern looks like \`x\` (to assign to a variable), \`Some value\` (to match a variant), \`(number : 5)\` (to match a structure), or \`_\` (to match anything).",
      "primaryLabel": {
        "file": "test/tests/call-function-diagnostic.wipple",
        "message": "expected a pattern here",
        "span": {
          "end": 84,
          "start": 70,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`Text\`?",
        "replacement": "Text",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`text\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/call-function-diagnostic.wipple",
        "message": "can't find \`text\`",
        "span": {
          "end": 97,
          "start": 93,
        },
      },
      "secondaryLabels": [
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
          "message": "\`Text\` is defined here, did you mean this?",
          "span": {
            "end": 58,
            "start": 47,
          },
        },
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/sequence.wipple",
          "message": "\`next\` is defined here, did you mean this?",
          "span": {
            "end": 393,
            "start": 341,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`collections.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`collections.wipple 2`] = `
{
  "output": "",
}
`;

exports[`colliding-instances.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 104,
          "start": 85,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 160,
            "start": 124,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 104,
          "start": 85,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 63,
            "start": 44,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 104,
          "start": 85,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 83,
            "start": 64,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 160,
          "start": 124,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 63,
            "start": 44,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 160,
          "start": 124,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 83,
            "start": 64,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try making this instance more specific or change the types involved.",
      "primaryLabel": {
        "file": "test/tests/colliding-instances.wipple",
        "message": "this instance is already defined",
        "span": {
          "end": 63,
          "start": 44,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/colliding-instances.wipple",
          "message": "other definition of the instance here",
          "span": {
            "end": 83,
            "start": 64,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`comparison.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`comparison.wipple 2`] = `
{
  "output": 
"True
True
True
True
True
expected defer value
"
,
}
`;

exports[`compose.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`compose.wipple 2`] = `
{
  "output": 
"1
2
1
2
"
,
}
`;

exports[`constant-captured-variables.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "remove the symbol",
        "replacement": "",
      },
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Wipple recognizes symbols like parentheses, math operators, numbers, and names containing \`A\` through \`Z\` and dashes (\`-\`). Make sure your code only uses these symbols.",
      "primaryLabel": {
        "file": "test/tests/constant-captured-variables.wipple",
        "message": "this symbol isn't recognized",
        "span": {
          "end": 21,
          "start": 20,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "remove the symbol",
        "replacement": "",
      },
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Wipple recognizes symbols like parentheses, math operators, numbers, and names containing \`A\` through \`Z\` and dashes (\`-\`). Make sure your code only uses these symbols.",
      "primaryLabel": {
        "file": "test/tests/constant-captured-variables.wipple",
        "message": "this symbol isn't recognized",
        "span": {
          "end": 72,
          "start": 71,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Operators like \`+\` prioritize the left or right side automatically. For example, \`1 + 2 + 3\` is the same as \`(1 + 2) + 3\`. However, \`:\` doesn't prioritize either side, so you need to use parentheses.",
      "primaryLabel": {
        "file": "test/tests/constant-captured-variables.wipple",
        "message": "the \`:\` operator can't be used multiple times in the same line of code",
        "span": {
          "end": 27,
          "start": 26,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/constant-captured-variables.wipple",
          "message": "first use of \`:\` here",
          "span": {
            "end": 19,
            "start": 18,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding some more code here.",
      "primaryLabel": {
        "file": "test/tests/constant-captured-variables.wipple",
        "message": "expected a piece of code here",
        "span": {
          "end": 0,
          "start": 0,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`n\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/constant-captured-variables.wipple",
        "message": "can't find \`n\`",
        "span": {
          "end": 60,
          "start": 58,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`constant-mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Number\` instead.",
      "primaryLabel": {
        "file": "test/tests/constant-mismatched-types.wipple",
        "message": "expected a \`Number\` here, but this code produces a \`Text\` instead",
        "span": {
          "end": 36,
          "start": 32,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/constant-mismatched-types.wipple",
          "message": "expected because the type was annotated here...",
          "span": {
            "end": 27,
            "start": 16,
          },
        },
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
          "message": "...but the actual type was annotated here",
          "span": {
            "end": 58,
            "start": 47,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`default-type-parameter.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`default-type-parameter.wipple 2`] = `
{
  "output": 
"no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type X",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`destructuring.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`destructuring.wipple 2`] = `
{
  "output": 
"Alice
Bob
no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type Person",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`dictionary.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`dictionary.wipple 2`] = `
{
  "output": 
"Basketball has 10 letters
Soccer has 6 letters
Golf has 4 letters
"
,
}
`;

exports[`did-you-mean.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`print\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/did-you-mean.wipple",
        "message": "can't find \`print\`",
        "span": {
          "end": 21,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`hello\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/did-you-mean.wipple",
        "message": "can't find \`hello\`",
        "span": {
          "end": 40,
          "start": 35,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`//\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/did-you-mean.wipple",
        "message": "can't find \`//\`",
        "span": {
          "end": 55,
          "start": 53,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`comment\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/did-you-mean.wipple",
        "message": "can't find \`comment\`",
        "span": {
          "end": 63,
          "start": 56,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`divisible-by.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`divisible-by.wipple 2`] = `
{
  "output": 
"True
False
False
True
"
,
}
`;

exports[`enumeration.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`enumeration.wipple 2`] = `
{
  "output": "",
}
`;

exports[`exhaustiveness-checking.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "The input could be one of these patterns, but your code doesn't handle them. Try adding some more cases or using \`_\` or a variable to match any possible value.",
      "primaryLabel": {
        "file": "test/tests/exhaustiveness-checking.wipple",
        "message": "missing patterns for \`D\` and \`F\`",
        "span": {
          "end": 90,
          "start": 85,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`expect-boolean.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`expect-boolean.wipple 2`] = `
{
  "output": 
"error: hello, world
"
,
}
`;

exports[`format.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`format.wipple 2`] = `
{
  "output": 
"no instance found for trait trait Show with type descriptor {"type":"function","value":[{"type":"named","value":["type Person",[]]},{"type":"named","value":["type Text",[]]}]}
"
,
}
`;

exports[`generic-call-within-generic-constant.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`generic-call-within-generic-constant.wipple 2`] = `
{
  "output": "",
}
`;

exports[`generic-instance.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`generic-instance.wipple 2`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`generic-type.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`generic-type.wipple 2`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`greet.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`greet.wipple 2`] = `
{
  "output": 
"Hello, Bob!
Hello, world!
"
,
}
`;

exports[`hello-world.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`hello-world.wipple 2`] = `
{
  "output": 
"Hello, world!
"
,
}
`;

exports[`help-show-code.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Compatible\`, or define a new instance for \`Compatible\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/help-show-code.wipple",
        "message": "\`foo\` is not compatible with \`bar\`",
        "span": {
          "end": 218,
          "start": 208,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`infer.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`infer.wipple 2`] = `
{
  "output": 
"C
Java
"
,
}
`;

exports[`is.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`is.wipple 2`] = `
{
  "output": 
"True
False
"
,
}
`;

exports[`linked-list.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`linked-list.wipple 2`] = `
{
  "output": 
"6
"
,
}
`;

exports[`list-mismatched-elements.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Number\` instead.",
      "primaryLabel": {
        "file": "test/tests/list-mismatched-elements.wipple",
        "message": "expected a \`Number\` here, but this code produces a \`Text\` instead",
        "span": {
          "end": 34,
          "start": 30,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/list-mismatched-elements.wipple",
          "message": "expected because the previous elements in the collection have type \`Number\`...",
          "span": {
            "end": 39,
            "start": 26,
          },
        },
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
          "message": "...but the actual type was annotated here",
          "span": {
            "end": 58,
            "start": 47,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Number\` instead.",
      "primaryLabel": {
        "file": "test/tests/list-mismatched-elements.wipple",
        "message": "expected a \`Number\` here, but this code produces a \`()\` instead",
        "span": {
          "end": 39,
          "start": 37,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/list-mismatched-elements.wipple",
          "message": "expected because the previous elements in the collection have type \`Number\`",
          "span": {
            "end": 39,
            "start": 26,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`lists.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`lists.wipple 2`] = `
{
  "output": 
"Some 1
Some 3
3: {"type":"jumpIfNot","value":["type Maybe / variant Some",6]}: expected variant
while evaluating {
    "typeDescriptor": {
        "type": "named",
        "value": [
            "type Maybe",
            [
                {
                    "type": "named",
                    "value": [
                        "type List",
                        [
                            {
                                "type": "named",
                                "value": [
                                    "type Number",
                                    []
                                ]
                            }
                        ]
                    ]
                }
            ]
        ]
    },
    "type": "list",
    "values": [
        {
            "typeDescriptor": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "type": "number",
            "value": "1"
        },
        {
            "typeDescriptor": {
                "type": "named",
                "value": [
                    "type Number",
                    []
                ]
            },
            "type": "number",
            "value": "2"
        }
    ]
}
stack: [
    {
        "typeDescriptor": {
            "type": "named",
            "value": [
                "type Maybe",
                [
                    {
                        "type": "named",
                        "value": [
                            "type List",
                            [
                                {
                                    "type": "named",
                                    "value": [
                                        "type Number",
                                        []
                                    ]
                                }
                            ]
                        ]
                    }
                ]
            ]
        },
        "type": "list",
        "values": [
            {
                "typeDescriptor": {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                "type": "number",
                "value": "1"
            },
            {
                "typeDescriptor": {
                    "type": "named",
                    "value": [
                        "type Number",
                        []
                    ]
                },
                "type": "number",
                "value": "2"
            }
        ]
    }
]
"
,
}
`;

exports[`logic.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`logic.wipple 2`] = `
{
  "output": 
"b
a
"
,
}
`;

exports[`math.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`math.wipple 2`] = `
{
  "output": 
"3
3
15
2.5
"
,
}
`;

exports[`mismatched-call.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Number -> Number -> Number\` instead.",
      "primaryLabel": {
        "file": "test/tests/mismatched-call.wipple",
        "message": "expected a \`Number -> Number -> Number\` here, but this code produces a \`Number -> Number -> Text\` instead",
        "span": {
          "end": 195,
          "start": 188,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/mismatched-call.wipple",
          "message": "expected because the type was annotated here...",
          "span": {
            "end": 195,
            "start": 188,
          },
        },
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/math.wipple",
          "message": "...but the actual type was annotated here",
          "span": {
            "end": 291,
            "start": 288,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`mismatched-inferred-params.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "A pattern looks like \`x\` (to assign to a variable), \`Some value\` (to match a variant), \`(number : 5)\` (to match a structure), or \`_\` (to match anything).",
      "primaryLabel": {
        "file": "test/tests/mismatched-inferred-params.wipple",
        "message": "expected a pattern here",
        "span": {
          "end": 52,
          "start": 41,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Text\` instead.",
      "primaryLabel": {
        "file": "test/tests/mismatched-types.wipple",
        "message": "expected a \`Text\` here, but this code produces a \`Number\` instead",
        "span": {
          "end": 18,
          "start": 16,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/mismatched-types.wipple",
          "message": "expected because the type was annotated here...",
          "span": {
            "end": 18,
            "start": 16,
          },
        },
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/language.wipple",
          "message": "...but the actual type was annotated here",
          "span": {
            "end": 13,
            "start": 0,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`missing-instance.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Show\`, or define a new instance for \`Show\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/missing-instance.wipple",
        "message": "cannot display \`Foo\` on the screen",
        "span": {
          "end": 37,
          "start": 33,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`mutable.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`mutable.wipple 2`] = `
{
  "output": 
"2
"
,
}
`;

exports[`negate.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`negate.wipple 2`] = `
{
  "output": 
"True
"
,
}
`;

exports[`nested-bounds.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`W\`, or define a new instance for \`W\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/nested-bounds.wipple",
        "message": "this code requires the instance \`W _\` to exist, but there is no such instance",
        "span": {
          "end": 202,
          "start": 201,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/nested-bounds.wipple",
          "message": "this instance could satisfy \`T _\`, but it requires \`U _\`",
          "span": {
            "end": 125,
            "start": 89,
          },
        },
        {
          "file": "test/tests/nested-bounds.wipple",
          "message": "this instance could satisfy \`U _\`, but it requires \`V _\`",
          "span": {
            "end": 162,
            "start": 126,
          },
        },
        {
          "file": "test/tests/nested-bounds.wipple",
          "message": "this instance could satisfy \`V _\`, but it requires \`W _\`",
          "span": {
            "end": 199,
            "start": 163,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`not.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`not.wipple 2`] = `
{
  "output": 
"expected defer value
"
,
}
`;

exports[`number-units.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`number-units.wipple 2`] = `
{
  "output": 
"no instance found for trait trait Equal with type descriptor {"type":"function","value":[{"type":"named","value":["type Elephants",[]]},{"type":"function","value":[{"type":"named","value":["type Elephants",[]]},{"type":"named","value":["type Boolean",[]]}]}]}
"
,
}
`;

exports[`operator-partial-application.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`operator-partial-application.wipple 2`] = `
{
  "output": 
"2
3
4
4
4
4
"
,
}
`;

exports[`operator-without-parentheses.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Add\`, or define a new instance for \`Add\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/operator-without-parentheses.wipple",
        "message": "cannot add \`2\` to \`show 1\`",
        "span": {
          "end": 26,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Or\`, or define a new instance for \`Or\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/operator-without-parentheses.wipple",
        "message": "this code requires the instance \`Or () Boolean _\` to exist, but there is no such instance",
        "span": {
          "end": 45,
          "start": 27,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Add\`, or define a new instance for \`Add\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/operator-without-parentheses.wipple",
        "message": "cannot add \`"hi"\` to \`1\`",
        "span": {
          "end": 61,
          "start": 51,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`or-pattern.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`or-pattern.wipple 2`] = `
{
  "output": 
"yay
"
,
}
`;

exports[`random.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`random.wipple 2`] = `
{
  "output": 
"0
1
Some 1
None
"
,
}
`;

exports[`recursive-instance.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`recursive-instance.wipple 2`] = `
{
  "output": 
"Some Some 42
"
,
}
`;

exports[`redundant-case.wipple 1`] = `
{
  "errors": [],
  "warnings": [
    {
      "error": false,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "This case is unreachable because a different pattern already handles the same pattern. Try removing this code.",
      "primaryLabel": {
        "file": "test/tests/redundant-case.wipple",
        "message": "extra case in \`when\` expression",
        "span": {
          "end": 60,
          "start": 54,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": false,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "This case is unreachable because a different pattern already handles the same pattern. Try removing this code.",
      "primaryLabel": {
        "file": "test/tests/redundant-case.wipple",
        "message": "extra case in \`when\` expression",
        "span": {
          "end": 85,
          "start": 84,
        },
      },
      "secondaryLabels": [],
    },
  ],
}
`;

exports[`redundant-case.wipple 2`] = `
{
  "output": 
"a
"
,
}
`;

exports[`remove-duplicates.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`remove-duplicates.wipple 2`] = `
{
  "output": 
"5
4
3
2
1
"
,
}
`;

exports[`repeat.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`repeat.wipple 2`] = `
{
  "output": 
"Hello, world!
Hello, world!
Hello, world!
Hello, world!
"
,
}
`;

exports[`set.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`set.wipple 2`] = `
{
  "output": 
"True
True
True
False
"
,
}
`;

exports[`show-variable.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Show\`, or define a new instance for \`Show\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/show-variable.wipple",
        "message": "cannot display \`my-variable\` on the screen",
        "span": {
          "end": 92,
          "start": 88,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`slice.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`slice.wipple 2`] = `
{
  "output": 
"c
d
e
f
g
h
"
,
}
`;

exports[`too-many-inputs.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Number -> Number -> ()\` instead.",
      "primaryLabel": {
        "file": "test/tests/too-many-inputs.wipple",
        "message": "expected a \`Number -> Number -> ()\` here, but this code produces a \`()\` instead",
        "span": {
          "end": 22,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`trig.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`trig.wipple 2`] = `
{
  "output": 
"expected number
"
,
}
`;

exports[`type-arithmetic.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so Wipple can check this code. One way to do this is by using \`::\` to explicitly annotate the type, but you can also try assigning this code to a variable and passing it to a function.",
      "primaryLabel": {
        "file": "test/tests/type-arithmetic.wipple",
        "message": "not enough information to determine the type of this code",
        "span": {
          "end": 274,
          "start": 263,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-arithmetic.wipple",
          "message": "this code produces a value of type \`_ -> S (S (S (S (S Z))))\`, where the \`_\` placeholders are unknown",
          "span": {
            "end": 274,
            "start": 263,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`type-logic.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding another type here.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "expected a type here",
        "span": {
          "end": 131,
          "start": 126,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding some more code here.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "expected a piece of code here",
        "span": {
          "end": 167,
          "start": 132,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding some more code here.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "expected a piece of code here",
        "span": {
          "end": 304,
          "start": 237,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Try choosing a different name for \`Less-Than\` so it doesn't conflict with the existing definition.",
      "primaryLabel": {
        "file": "/Users/wilson/Desktop/wipple-wasm/library/base/logic.wipple",
        "message": "\`Less-Than\` is already defined",
        "span": {
          "end": 1882,
          "start": 1828,
        },
      },
      "secondaryLabels": [
        {
          "file": "/Users/wilson/Desktop/wipple-wasm/library/base/logic.wipple",
          "message": "the other \`Less-Than\` is defined here",
          "span": {
            "end": 1882,
            "start": 1828,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`instance\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`instance\`",
        "span": {
          "end": 176,
          "start": 168,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`S\`?",
        "replacement": "S",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`S\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`S\`",
        "span": {
          "end": 190,
          "start": 189,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-logic.wipple",
          "message": "\`S\` is defined here, did you mean this?",
          "span": {
            "end": 38,
            "start": 25,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`_\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`_\`",
        "span": {
          "end": 192,
          "start": 191,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`Z\`?",
        "replacement": "Z",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`Z\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`Z\`",
        "span": {
          "end": 195,
          "start": 194,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-logic.wipple",
          "message": "\`Z\` is defined here, did you mean this?",
          "span": {
            "end": 24,
            "start": 16,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`instance\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`instance\`",
        "span": {
          "end": 211,
          "start": 203,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`Z\`?",
        "replacement": "Z",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`Z\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`Z\`",
        "span": {
          "end": 224,
          "start": 223,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-logic.wipple",
          "message": "\`Z\` is defined here, did you mean this?",
          "span": {
            "end": 24,
            "start": 16,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`S\`?",
        "replacement": "S",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`S\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`S\`",
        "span": {
          "end": 227,
          "start": 226,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-logic.wipple",
          "message": "\`S\` is defined here, did you mean this?",
          "span": {
            "end": 38,
            "start": 25,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`_\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "can't find \`_\`",
        "span": {
          "end": 229,
          "start": 228,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Boolean -> _\` instead.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "expected a \`Boolean -> _\` here, but this code produces a \`Boolean\` instead",
        "span": {
          "end": 195,
          "start": 178,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a \`Boolean -> _\` instead.",
      "primaryLabel": {
        "file": "test/tests/type-logic.wipple",
        "message": "expected a \`Boolean -> _\` here, but this code produces a \`Boolean\` instead",
        "span": {
          "end": 229,
          "start": 213,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`type-span.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Add\`, or define a new instance for \`Add\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/type-span.wipple",
        "message": "cannot add \`1\` to \`show\`",
        "span": {
          "end": 24,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Add\`, or define a new instance for \`Add\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/type-span.wipple",
        "message": "cannot add \`1\` to \`Show\`",
        "span": {
          "end": 33,
          "start": 25,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`type-states.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Operators like \`+\` prioritize the left or right side automatically. For example, \`1 + 2 + 3\` is the same as \`(1 + 2) + 3\`. However, \`:\` doesn't prioritize either side, so you need to use parentheses.",
      "primaryLabel": {
        "file": "test/tests/type-states.wipple",
        "message": "the \`:\` operator can't be used multiple times in the same line of code",
        "span": {
          "end": 281,
          "start": 280,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/type-states.wipple",
          "message": "first use of \`:\` here",
          "span": {
            "end": 240,
            "start": 239,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding some more code here.",
      "primaryLabel": {
        "file": "test/tests/type-states.wipple",
        "message": "expected a piece of code here",
        "span": {
          "end": 0,
          "start": 0,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`undefined-math-ops.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`undefined-math-ops.wipple 2`] = `
{
  "output": 
"NaN
Infinity
NaN
NaN
1.7976931348623159077e+308
"
,
}
`;

exports[`undefined-name.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`foo\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/undefined-name.wipple",
        "message": "can't find \`foo\`",
        "span": {
          "end": 19,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`unresolved-type-multiple-parameters.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`T\`?",
        "replacement": "T",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`T\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/unresolved-type-multiple-parameters.wipple",
        "message": "can't find \`T\`",
        "span": {
          "end": 87,
          "start": 86,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/unresolved-type-multiple-parameters.wipple",
          "message": "\`T\` is defined here, did you mean this?",
          "span": {
            "end": 29,
            "start": 16,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`U\`?",
        "replacement": "U",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`U\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/unresolved-type-multiple-parameters.wipple",
        "message": "can't find \`U\`",
        "span": {
          "end": 223,
          "start": 222,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/unresolved-type-multiple-parameters.wipple",
          "message": "\`U\` is defined here, did you mean this?",
          "span": {
            "end": 45,
            "start": 30,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "did you mean \`U\`?",
        "replacement": "U",
      },
      "group": {
        "example": "name-error",
        "explanation": "Wipple couldn't find the definition for a name in your code.",
        "name": "Name error",
      },
      "help": "Check your spelling or add a definition for \`U\` using \`:\`.",
      "primaryLabel": {
        "file": "test/tests/unresolved-type-multiple-parameters.wipple",
        "message": "can't find \`U\`",
        "span": {
          "end": 245,
          "start": 244,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/unresolved-type-multiple-parameters.wipple",
          "message": "\`U\` is defined here, did you mean this?",
          "span": {
            "end": 45,
            "start": 30,
          },
        },
      ],
    },
  ],
  "warnings": [],
}
`;

exports[`unzip.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`unzip.wipple 2`] = `
{
  "output": 
"Left:
1
2
3
Right:
a
b
c
"
,
}
`;

exports[`when-mismatched-types.wipple 1`] = `
{
  "errors": [
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "remove the symbol",
        "replacement": "",
      },
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Wipple recognizes symbols like parentheses, math operators, numbers, and names containing \`A\` through \`Z\` and dashes (\`-\`). Make sure your code only uses these symbols.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "this symbol isn't recognized",
        "span": {
          "end": 33,
          "start": 32,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": {
        "after": null,
        "before": null,
        "message": "remove the symbol",
        "replacement": "",
      },
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because a symbol is missing or is in the wrong place.",
        "name": "Syntax error",
      },
      "help": "Wipple recognizes symbols like parentheses, math operators, numbers, and names containing \`A\` through \`Z\` and dashes (\`-\`). Make sure your code only uses these symbols.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "this symbol isn't recognized",
        "span": {
          "end": 64,
          "start": 63,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding another type here.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "expected a type here",
        "span": {
          "end": 34,
          "start": 33,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding another type here.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "expected a type here",
        "span": {
          "end": 47,
          "start": 46,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because it was expecting a different piece of code than the one provided.",
        "name": "Syntax error",
      },
      "help": "Try adding some more code here.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "expected a piece of code here",
        "span": {
          "end": 63,
          "start": 62,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "syntax-error",
        "explanation": "Wipple couldn't understand your code because some information is missing.",
        "name": "Syntax error",
      },
      "help": "Try removing some of these inputs or adding more placeholders to the text.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "expected 0 values after the text because it has 1 placeholders",
        "span": {
          "end": 62,
          "start": 58,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so Wipple can check this code. One way to do this is by using \`::\` to explicitly annotate the type, but you can also try assigning this code to a variable and passing it to a function.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "not enough information to determine the type of this code",
        "span": {
          "end": 46,
          "start": 44,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/when-mismatched-types.wipple",
          "message": "this code produces a value of type \`_ -> Boolean -> Text\`, where the \`_\` placeholders are unknown",
          "span": {
            "end": 46,
            "start": 44,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so Wipple can check this code. One way to do this is by using \`::\` to explicitly annotate the type, but you can also try assigning this code to a variable and passing it to a function.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "not enough information to determine the type of this code",
        "span": {
          "end": 31,
          "start": 27,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/when-mismatched-types.wipple",
          "message": "this code produces a value of type \`_ -> Boolean -> Number -> _ -> Boolean -> Text\`, where the \`_\` placeholders are unknown",
          "span": {
            "end": 31,
            "start": 27,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try providing some more context so Wipple can check this code. One way to do this is by using \`::\` to explicitly annotate the type, but you can also try assigning this code to a variable and passing it to a function.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "not enough information to determine the type of this code",
        "span": {
          "end": 65,
          "start": 21,
        },
      },
      "secondaryLabels": [
        {
          "file": "test/tests/when-mismatched-types.wipple",
          "message": "this code produces a value of type \`_ -> Boolean -> _ -> Boolean -> Number -> _ -> Boolean -> Text\`, where the \`_\` placeholders are unknown",
          "span": {
            "end": 65,
            "start": 21,
          },
        },
      ],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "Try adjusting the code so it produces a type compatible with \`Show\`, or define a new instance for \`Show\` using \`instance\`.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": 
"cannot display \`(when True {
  True -> 42
  False -> "hi"
})\` on the screen"
,
        "span": {
          "end": 20,
          "start": 16,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "The input could be one of these patterns, but your code doesn't handle them. Try adding some more cases or using \`_\` or a variable to match any possible value.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "missing pattern for \`False\`",
        "span": {
          "end": 26,
          "start": 22,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "The input could be one of these patterns, but your code doesn't handle them. Try adding some more cases or using \`_\` or a variable to match any possible value.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "missing pattern for \`False\`",
        "span": {
          "end": 34,
          "start": 33,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "The input could be one of these patterns, but your code doesn't handle them. Try adding some more cases or using \`_\` or a variable to match any possible value.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "missing pattern for \`_\`",
        "span": {
          "end": 40,
          "start": 36,
        },
      },
      "secondaryLabels": [],
    },
    {
      "error": true,
      "fix": null,
      "group": {
        "example": "type-error",
        "explanation": "This code doesn't produce what's expected here. Double-check that you're providing the right inputs and using the correct units.",
        "name": "Type error",
      },
      "help": "The input could be one of these patterns, but your code doesn't handle them. Try adding some more cases or using \`_\` or a variable to match any possible value.",
      "primaryLabel": {
        "file": "test/tests/when-mismatched-types.wipple",
        "message": "missing pattern for \`True\`",
        "span": {
          "end": 47,
          "start": 46,
        },
      },
      "secondaryLabels": [],
    },
  ],
  "warnings": [],
}
`;

exports[`when.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`when.wipple 2`] = `
{
  "output": 
"Yay!
"
,
}
`;

exports[`where-pattern.wipple 1`] = `
{
  "errors": [],
  "warnings": [],
}
`;

exports[`where-pattern.wipple 2`] = `
{
  "output": 
"oh no
"
,
}
`;
