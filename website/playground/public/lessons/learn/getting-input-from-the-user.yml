sections:
  - id: 6z1mlFv3
    type: text
    value: |-
      # Getting input from the user

      So far, we've written programs that always do the same thing. Now, we'll learn how to make our programs interactive by getting input from the user!

      Let's start by creating a text field that the user can type into. We can do this using the `prompt` function:
    locked: true
  - id: 30DAFG7v
    type: code
    value: |-
      name : prompt "What is your name?" :: Text
      show (format "Hello, _!" name)
  - id: kRisjDRb
    type: text
    value: |-
      Try typing your name into the text field and watch the program greet you!

      Note that we have to annotate the type of `name` with `::`. This is because we have to tell Wipple what kind of data we want to read — `prompt` can convert the user's input into anything that implements the `Read` trait, which includes numeric types as well as your own custom types.

      For example, you can read numbers like so! Try entering something that's not a number — you'll see the Playground highlights the text field in red, indicating an error.
    locked: true
  - id: OMYv9QFu
    type: code
    value: |-
      n : prompt "Enter a number" :: Number
      show (format "The next number after _ is _" n (n + 1))
  - id: NMb7_x5x
    type: text
    value: You can call `prompt` multiple times to get multiple values from the user!
    locked: true
  - id: R8pJl2Mr
    type: code
    value: |-
      x1 : prompt "First x coordinate"
      y1 : prompt "First y coordinate"
      x2 : prompt "Second x coordinate"
      y2 : prompt "Second y coordinate"

      distance : sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2)
      show (format "The distance between $(_, _)$ and $(_, _)$ is $_$" x1 y1 x2 y2 distance)
  - id: c-u5gYPi
    type: text
    value: 'Wipple also has another function called `choice` that allows the user to pick from a set of options:'
    locked: true
  - id: uEm0HRas
    type: code
    value: |-
      colors : list "red" "orange" "yellow" "green" "blue" "violet"
      color : choice "Favorite color" colors
      show (format "Your favorite color is _" color)
  - id: wjLAkLea
    type: text
    value: Let's combine what we learned about Markdown in the last section to make the example more, well, colorful!
    locked: true
  - id: gexw86hW
    type: code
    value: |-
      colors : list "red" "orange" "yellow" "green" "blue" "violet"
      color : choice "Favorite color" colors
      show (format "Your favorite color is <span style='color: _'>_</span>" color color)
  - id: IINYj6_5
    type: text
    value: '`choice` accepts a list of any type that implements `Show`, so it''s easy to match it with a `when` expression:'
    locked: true
  - id: It2P5bZn
    type: code
    value: |-
      Font-Size : type {
      	Large
      	Medium
      	Small
      	Regular
      }

      use Font-Size

      instance (Show Font-Size) : font-size -> when font-size {
      	Large -> "large"
      	Medium -> "medium"
      	Small -> "small"
      	Regular -> "regular"
      }

      with-font-size :: Font-Size -> Text -> Text
      with-font-size : font-size -> text -> when font-size {
      	Large -> format "# _" text
      	Medium -> format "## _" text
      	Small -> format "### _" text
      	Regular -> text
      }

      font-size : choice "Choose a font size" (list Large Medium Small Regular)
      text : prompt "Enter some text" :: Text
      show (text . with-font-size font-size)
previous:
  name: Customizing the Playground
  link: ?lesson=learn/customizing-the-playground
next:
  name: Why all the parentheses?
  link: ?lesson=learn/why-all-the-parentheses
