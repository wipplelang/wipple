---
previous:
  name: Making your own types
  link: ?lesson=intermediate/types
next:
  name: Making your own patterns
  link: ?lesson=intermediate/custom-patterns
---

---
id: BUJ_nGE_
type: text
locked: true
---

# Patterns

`if` is great for making simple decisions about your input, but for more complicated cases it can get unwieldy:

---
id: NMu6gU-d
type: code
---

n : prompt "Enter a number"
show (if (n = 0) "zero" (if (n = 1) "one" (if (n = 2) "two" "error")))

---
id: PHIfwa1Z
type: text
locked: true
---

Luckily, Wipple has another function called `when` for this exact purpose! `when` accepts an input and a bunch of **patterns** to match. The first pattern that matches has its body executed. Let's see it in action:

---
id: eL97zZes
type: code
---

n : prompt "Enter a number"

show (when n {
    0 -> "zero"
    1 -> "one"
    2 -> "two"
    _ -> "error"
})

---
id: nsAmoBQr
type: text
locked: true
---

In fact, `if` is actually `when` under the hood, matching on `True` and `False`!

Let's go through this code more thoroughly. First, we provide the input to `when`. Then, we list all the cases we want to handle. The last case, the underscore `_`, serves as a "catch-all" pattern that handles any number that's not 0, 1 or 2. The right-hand side of a function is only run if the input matches the pattern on the left-hand side. Only the first function to match is called; after that, `when` exits.

`when` also works for text!

---
id: wYMfRoae
type: code
---

key : prompt "Enter the secret key"
show (when key {
    "Wipple" -> "access granted"
    _ -> "access denied"
})

---
id: J1IB59yt
type: text
locked: true
---

A pattern can also be a variable:

---
id: dEmFKsJM
type: code
lint: false
---

when "hi" {
    x -> show (format "x is _" x)
    y -> show (format "y is _" y)
}

---
id: YZwOGt2x
type: text
locked: true
---

Notice that only one of the functions (the one for `x`) is called, and the input is assigned to the `x` variable and displayed.

Also, it's important to note that `x` is only available on the right-hand side of the function — you can't use it after the function finishes! This is different from other languages like Python, where you can assign a variable in each branch of an `if` statement and use it afterward. But this isn't usually a problem in Wipple, because `when` is just a function that returns a value, which you can assign to a variable right away!

---
id: N_9wq35v
type: code
---

name : "Wipple"

greeting : when name {
    "Wipple" -> "My favorite language!"
    _ -> format "Hello, _!" name
}

show greeting

---
id: DyqmK6qi
type: text
locked: true
---

You can also use `or` to match one of two or more patterns in the same function:

---
id: E-8G5kUA
type: code
---

name : "Wipple"

greeting : when name {
    "Wipple" -> "My favorite language!"
    "Python" or "JavaScript" -> format "_ is cool too!" name
    _ -> format "Hello, _!" name
}

show greeting

---
id: jBZgOy_a
type: text
locked: true
---

If you want to run multiple lines of code inside a `when`, you can use braces:

---
id: 1Ub_bGL_
type: code
---

when (1 + 1) {
    2 -> {
        show "Woohoo!"
        show "Math works!"
    }
    _ -> show "Uh oh..."
}

---
id: b2jyiYbu
type: text
locked: true
---

Thanks to Wipple's type system, using `when` instead of `if` is actually a better choice in most cases, because `when` ensures that you handle all possible cases. How does that work? Let's take a look in the next lesson!
