{
    "sections": [
        {
            "id": "Gi1J6phe",
            "type": "text",
            "value": "# Working with lists\n\nLists are another useful tool in programming. Follow along with the example below!"
        },
        {
            "id": "MwMd7wQO",
            "type": "code",
            "value": "-- Let's say you're hosting a party and want to spread the word:\n\nContact : type {\n\tname :: Text\n\tbusy :: Boolean\n}\n\nparty-time :: Contact -> ()\nparty-time : { name busy } ->\n\tif busy\n\t\t() -- don't alert the contact if they're busy\n\t\t(show (format \"Hi _, you're invited to my party!\" name))\n\n-- We could start by alerting everyone we know:\n\nshow \"Example 1:\"\n\nalice : Contact {\n\tname : \"Alice\"\n\tbusy : False\n}\n\nbob : Contact {\n\tname : \"Bob\"\n\tbusy : True\n}\n\ncharlie : Contact {\n\tname : \"Charlie\"\n\tbusy : False\n}\n\nparty-time alice -- Hi Alice, you're invited to my party!\nparty-time bob -- no output\nparty-time charlie -- Hi Charlie, you're invited to my party!\n\n-- But there's a problem with this example: what if there are more contacts?\n-- We'd have to add another call to `party-time` — as many as there are contacts!\n-- Even worse, what if we don't know how many contacts there are as we're writing\n-- the program? Luckily, lists make it easy to deal with changing amounts of\n-- information.\n\n-- Let's create our first list using the `list` function, which accepts a tuple:\n\ncontacts : list (alice , bob , charlie)\n\n-- Now we can use the `each` function to call `party-time` for each contact in\n-- the list:\n\nshow \"Example 2:\"\n\neach party-time contacts\n\n-- Great! There's one more thing we can do to clean up this code a little bit --\n-- instead of having the `if` condition inside `party-time`, we can filter out\n-- contacts in the list that are busy. To accomplish this, we can use the `filter`\n-- function:\n\nparty-time-v2 :: Contact -> ()\nparty-time-v2 : { name } -> show (format \"Hi _, you're invited to my party!\" name)\n\nshow \"Example 3:\"\neach party-time-v2 (filter (({ busy } :: Contact) -> not busy) contacts)\n\n-- (Why do we need the `:: Contact` type annotation? Wipple's type system is\n-- still in development and has a few bugs affecting type inference. In the\n-- future, you won't need this annotation!)\n\n-- Hmm, this code is a bit hard to read. Fear not — Wipple has another construct\n-- to make it easier to compose functions like this! Any time you see `f x`, you\n-- can replace it with `x . f`. This is where partial application shines!\n\nshow \"Example 4:\"\n\ncontacts\n\t. filter (({ busy } :: Contact) -> not busy)\n\t. each party-time-v2\n\t\n-- Much better! Take a look below and you'll see that all four examples are\n-- equivalent!"
        }
    ],
    "previous": {
        "name": "Tuples",
        "link": "?lesson=learn/13-tuples"
    }
}
