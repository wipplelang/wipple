[[no-implicit-use]]

use "sequence"

[help "A continuous range between two numbers."]
[help-group "Math"]
Range : N => type {
  min :: N
  max :: N
}

[help "A range between two numbers that counts up by a certain number."]
[help-group "Math"]
Stride : N => type {
  min :: N
  max :: N
  step :: N
}

N where (Default N) (Order N) (Add N N N) => instance (As-Sequence (Stride N) N) : stride -> {
  zero : Default
  { min max step } : stride

  (max >= min) . expect "`max` must be greater than `min`"
  (step >= zero) . expect "`step` must be positive"

  current : mutable min
  sequence {
    if (get current >= max) {
      None
    } {
      n : get current
      current . add! step
      Some n
    }
  }
}

[help "Form a range or stride between two numbers."]
[help-group "Math"]
to : syntax {
  'min to 'max by 'step -> Stride {
    min : 'min
    max : 'max
    step : 'step
  }
  'min to 'max -> Range {
    min : 'min
    max : 'max
  }
}

[help "Retrieve the elements of a list between a range of indices."]
[help-group "Collections"]
slice :: A => Range Number -> List A -> List A
slice : { min max } l -> semantics "pure" (intrinsic "list-slice" l min max)
