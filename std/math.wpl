[[no-implicit-use]]

use "fp"
use "util"
use "logic"

[help "The number returned from calculations whose result is undefined (eg. dividing by zero)."]
undefined :: Number
undefined : semantics "pure" (intrinsic "undefined-number")

[help "Implements the `+` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot add _ to _" Right Left)]
Add : (Left : Number) (Right : Number) (infer Sum) => trait (Right -> Left -> Sum)

[help "Add two values together, returning the sum."]
[help-group "Math"]
[operator Addition-Precedence]
+ : syntax {
  ('a + 'b) -> Add 'b 'a
  ('a +) -> {
    a : 'a
    b -> Add b a
  }
  (+ 'b) -> Add 'b
  (+) -> Add
}

instance (Add Number Number Number) : b a -> semantics "pure" (intrinsic "add-number" a b)

[help "Implements the `-` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot subtract _ from _" Right Left)]
Subtract : (Left : Number) (Right : Number) (infer Difference) => trait (Right -> Left -> Difference)

[help "Subtract the right side from the left side, returning the difference."]
[help-group "Math"]
[operator Addition-Precedence]
- : syntax {
  ('a - 'b) -> Subtract 'b 'a
  ('a -) -> {
    a : 'a
    b -> Subtract b a
  }
  (- 'b) -> Subtract 'b
  (-) -> Subtract
}

instance (Subtract Number Number Number) : b a -> semantics "pure" (intrinsic "subtract-number" a b)

[help "Implements the `*` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot multiply _ by _" Left Right)]
Multiply : (Left : Number) (Right : Number) (infer Product) => trait (Right -> Left -> Product)

[help "Multiply two values together, returning the product."]
[help-group "Math"]
[operator Multiplication-Precedence]
* : syntax {
  ('a * 'b) -> Multiply 'b 'a
  ('a *) -> {
    a : 'a
    b -> Multiply b a
  }
  (* 'b) -> Multiply 'b
  (*) -> Multiply
}

instance (Multiply Number Number Number) : b a -> semantics "pure" (intrinsic "multiply-number" a b)

[help "Implements the `/` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot divide _ by _" Left Right)]
Divide : (Left : Number) (Right : Number) (infer Quotient) => trait (Right -> Left -> Quotient)

[help "Divide the left side by the right side, returning the quotient."]
[help-group "Math"]
[operator Multiplication-Precedence]
/ : syntax {
  ('a / 'b) -> Divide 'b 'a
  ('a /) -> {
    a : 'a
    b -> Divide b a
  }
  (/ 'b) -> Divide 'b
  (/) -> Divide
}

instance (Divide Number Number Number) : b a -> semantics "pure" (intrinsic "divide-number" a b)

[help "Implements the `mod` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot divide _ by _" Left Right)]
Modulo : (Left : Number) (Right : Number) (infer Remainder) => trait (Right -> Left -> Remainder)

[help "Divide the left side by the right side, returning the remainder."]
[help-group "Math"]
[operator Multiplication-Precedence]
mod : syntax {
  ('a mod 'b) -> Modulo 'b 'a
  ('a mod) -> {
    a : 'a
    b -> Modulo b a
  }
  (mod 'b) -> Modulo 'b
  (mod) -> Modulo
}

instance (Modulo Number Number Number) : b a -> semantics "pure" (intrinsic "modulo-number" a b)

[help "Implements the `^` operator."]
[help-group "Math"]
[help-show-code]
[on-unimplemented ("cannot raise _ to the power of _" Left Right)]
Power : (Left : Number) (Right : Number) (infer Pow) => trait (Right -> Left -> Pow)

[help "Raise the left side to the power of the right side."]
[help-group "Math"]
[operator Exponentiation-Precedence]
^ : syntax {
  ('a ^ 'b) -> Power 'b 'a
  ('a ^) -> {
    a : 'a
    b -> Power b a
  }
  (^ 'b) -> Power 'b
  (^) -> Power
}

instance (Power Number Number Number) : b a -> semantics "pure" (intrinsic "power-number" a b)

[help "Rounds down a number to the nearest integer."]
[help-group "Math"]
floor :: Number -> Number
floor : n -> semantics "pure" (intrinsic "floor-number" n)

[help "Rounds up a number to the nearest integer."]
[help-group "Math"]
ceil :: Number -> Number
ceil : n -> semantics "pure" (intrinsic "ceil-number" n)

[help "Calculates the square root of a number."]
[help-group "Math"]
sqrt :: Number -> Number
sqrt : n -> semantics "pure" (intrinsic "sqrt-number" n)

[help "An angle, represented in degrees or radians."]
[help-group "Math"]
[help-convert-from Number ('value degrees)]
Angle : type {
  Radians Number
  Degrees Number
}

[help "An angle in radians."]
[help-group "Math"]
radians :: Number -> Angle
radians : Radians

[help "An angle in degrees."]
[help-group "Math"]
degrees :: Number -> Angle
degrees : Degrees

[help "Calculates the sine of a number."]
[help-group "Math"]
sin :: Angle -> Number
sin : angle -> semantics "pure" (intrinsic "sin-number" angle)

[help "Calculates the cosine of a number."]
[help-group "Math"]
cos :: Angle -> Number
cos : angle -> semantics "pure" (intrinsic "cos-number" angle)

[help "Calculates the tangent of a number."]
[help-group "Math"]
tan :: Angle -> Number
tan : angle -> semantics "pure" (intrinsic "tan-number" angle)

[help "Negates the sign of a number."]
[help-group "Math"]
Negate : N => trait (N -> N)
negate :: (N : Number) where (Negate N) => N -> N
negate : Negate
instance (Negate Number) : n -> semantics "pure" (intrinsic "negate-number" n)

[help "Check if a number is divisible by another number."]
[help-group "Math"]
divisible-by? :: Number -> Number -> Boolean
divisible-by? : b a -> a mod b = Default
