{
    "sections": [
        {
            "id": "6ovXgASj",
            "type": "text",
            "value": "# Structures\n\nSo far, we've been writing programs that deal with \"simple\" data — numbers, text, functions, and so on. Now, we'll learn how to model complex data using **structures**!\n\nThis is a larger program that builds upon each example, so follow along by reading the comments in the code!",
            "locked": true
        },
        {
            "id": "MRVKlCoP",
            "type": "code",
            "value": "-- Let's start by modeling a `Person`. We can create our own structure type like\n-- so:\n\nPerson : type {\n    name :: Text\n    age :: Number\n}\n\n-- Now let's actually create a `Person` value:\n\nbob : Person {\n    name : \"Bob\"\n    age : 30\n}\n\n-- To retrieve the `name` and the `age` from `bob`, we can use destructuring:\n\n{ name age } : bob\n\nshow name -- Bob\nshow age -- 30\n\n-- You can use destructuring inside functions, too!\n\ndescribe :: Person -> Text\ndescribe : { name age } -> format \"_ is _ years old\" name age\n\nshow (describe bob) -- Bob is 30 years old"
        },
        {
            "id": "JqK0Jmzg",
            "type": "text",
            "value": "How about a more complicated example? Let's add in type functions!",
            "locked": true
        },
        {
            "id": "Z0Fc_ffR",
            "type": "code",
            "value": "Pair : A B => type {\n    first :: A\n    second :: B\n}\n\nmy-pair :: Pair (Pair Text Number) Number\nmy-pair : Pair {\n    first : Pair {\n        first : \"abc\"\n        second : 1\n    }\n    second : 2\n}"
        },
        {
            "id": "H2WuiY_L",
            "type": "text",
            "value": "\nLet's conclude our journey with types by talking about **traits**!",
            "locked": true
        }
    ],
    "previous": { "name": "Type functions", "link": "?lesson=learn/07-type-functions" },
    "next": { "name": "Traits", "link": "?lesson=learn/09-traits" }
}
