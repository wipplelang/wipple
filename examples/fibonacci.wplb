; Fibonacci sequence
;
; Since this is getting complicated, here is the (functionally) equivalent
; Wipple code:
;
;     fib : n -> if n <= 1 n (fib n - 1) + (fib n - 2)
;     show (fib 10)

(version "0.0.0")

(def lte extern "math" "lte")
(def add extern "math" "add")
(def sub extern "math" "sub")
(def show extern "io" "show")

(def fib block (def n)
  (use (const num 1))         ; store 1 in $1
  (call lte n $1)             ; call 'lte' with $0 (n) and $1 (1), which stores
                              ;  its result in $2

  (if $2                      ; read $2 (0 or 1)
    ; execute if $2 (0 or 1) is not zero
    ((exit n))                ; exit the block, returning $0 (n)
    ; execute if $2 (0 or 1) is zero
    ((use (const num 1))      ; store 1 in $3
     (call sub n $3)          ; call 'sub' with $0 (n) and $3 (1), which stores
                              ;  its result in $4
     (enter fib $3)           ; enter 'fib' with $4 (n - 1), storing the result
                              ;  in $5
     (use (const num 2))      ; store 2 in $6
     (call sub n $6)          ; call 'sub' with $0 (n) and $6 (2), which stores
                              ;  its result in $7
     (enter fib $7)           ; enter 'fib' with $7 (n - 2), storing the result
                              ;  in $8
     (call add $5 $8)         ; call 'add' with $5 (fib n - 1) and $8
                              ;  (fib n - 2), which stores its result in $9
     (exit $9))))             ; exit the block, returning $9 ((fib n - 1) +
                              ;  (fib n - 2))

(block (def input) (def result)
  (use (const num 10))        ; store 10 in #0
  (enter fib input)           ; enter 'fib' with #0 (10), storing the result in
                              ;  #1
  (call show result)          ; call 'show' with #1
  (exit))                     ; exit the block
