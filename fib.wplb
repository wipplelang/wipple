(def fib block (def n)
  (use (const num 1))         ; store 1 in $1
  (call lte n $1)             ; call 'lte' with $0 (n) and $1 (1), which stores
                              ;  its result in $2

  (if $2                      ; read $2 (0 or 1)
    ; execute if $2 (0 or 1) is not zero
    ((exit n))                ; exit the block, returning $0 (n)
    ; execute if $2 (0 or 1) is zero
    ((use (const num 1))      ; store 1 in $3
     (call sub n $3)          ; call 'sub' with $0 (n) and $3 (1), which stores
                              ;  its result in $4
     (enter fib $3)           ; enter 'fib' with $4 (n - 1), storing the result
                              ;  in $5
     (use (const num 2))      ; store 2 in $6
     (call sub n $6)          ; call 'sub' with $0 (n) and $6 (2), which stores
                              ;  its result in $7
     (enter fib $7)           ; enter 'fib' with $7 (n - 2), storing the result
                              ;  in $8
     (call add $5 $8)         ; call 'add' with $5 (fib n - 1) and $8
                              ;  (fib n - 2), which stores its result in $9
     (exit $9))))             ; exit the block, returning $9 ((fib n - 1) +
                              ;  (fib n - 2))
