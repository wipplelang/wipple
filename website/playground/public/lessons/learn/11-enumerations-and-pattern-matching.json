{
    "sections": [
        {
            "id": "wrFvsznN",
            "type": "text",
            "value": "# Enumerations and pattern matching\n\nIn the last section, we learned how to use the `if` function to make a choice in our program. Now, we'll take a look at the `when` function, which is like a more powerful version of `if`!\n\n`when` allows you to make a choice out of many possibilities at once. For example, let's say we have a number we want to describe:",
            "locked": true
        },
        {
            "id": "Tos2GcCk",
            "type": "code",
            "value": "describe : n -> when n {\n    1 -> \"one\"\n    2 -> \"two\"\n    3 -> \"three\"\n    _ -> \"number must be between 1 and 3\"\n}\n\nshow (describe 2)"
        },
        {
            "id": "HmKdvwFY",
            "type": "text",
            "value": "As you can see, `when` accepts an input and a bunch of functions to choose from. On the left-hand side of the `->`, we provide a number, and on the right-hand side, a value that `when` will pick if the input matches the number. If none of the numbers are matched, the `_` pattern serves as a catch-all. This concept is aptly called \"pattern matching\"!\n\nYou can also use pattern matching on text:",
            "locked": true
        },
        {
            "id": "QVU5aka-",
            "type": "code",
            "value": "report-card : grade -> when grade {\n    \"A\" -> \"top of the class\"\n    \"B\" -> \"good work\"\n    \"C\" -> \"getting there\"\n    _ -> \"need to study\"\n}\n\nshow (report-card \"A\")"
        },
        {
            "id": "HxSfls6m",
            "type": "text",
            "value": "Pattern matching on text is common in other languages where the text is used to represent the type of data we're dealing with. But what happens if we provide a piece of text we don't know how to deal with?",
            "locked": true
        },
        {
            "id": "C6t_PBWr",
            "type": "code",
            "value": "report-card : grade -> when grade {\n    \"A\" -> \"top of the class\"\n    \"B\" -> \"good work\"\n    \"C\" -> \"getting there\"\n    _ -> \"need to study\"\n}\n\nshow (report-card \"E\")"
        },
        {
            "id": "A0cBefNz",
            "type": "text",
            "value": "Here, providing a grade of \"E\" gives us \"need to study\", but \"E\" isn't a grade! In most languages, you would crash the program when receiving an input you don't know how to deal with:",
            "locked": true
        },
        {
            "id": "FL-GXHBQ",
            "type": "code",
            "value": "report-card : grade -> when grade {\n    \"A\" -> \"top of the class\"\n    \"B\" -> \"good work\"\n    \"C\" -> \"getting there\"\n    \"D\" or \"F\" -> \"need to study\"\n    _ -> crash \"invalid grade\"\n}\n\nshow (report-card \"E\")"
        },
        {
            "id": "5ohOsenq",
            "type": "text",
            "value": "In Wipple, we can do better. Wipple's type system allows us to define a fixed set of possibilities using a `type`!",
            "locked": true
        },
        {
            "id": "41oa2iMZ",
            "type": "code",
            "value": "Grade : type {\n    A\n    B\n    C\n    D\n    F\n}\n\nreport-card :: Grade -> Text\nreport-card : grade -> when grade {\n    Grade A -> \"top of the class\"\n    Grade B -> \"good work\"\n    Grade C -> \"getting there\"\n    Grade D or Grade F -> \"need to study\"\n}\n\n-- Now, it's impossible to provide a `Grade E`!\nshow (report-card (Grade E))"
        },
        {
            "id": "42X6Zhy0",
            "type": "text",
            "value": "By the way, if you want to avoid writing `Grade` every time, you can write `use Grade` and then refer to `A` through `F` directly:",
            "locked": true
        },
        {
            "id": "hbuhbrtL",
            "type": "code",
            "value": "Grade : type {\n    A\n    B\n    C\n    D\n    F\n}\n\nuse Grade\n\nreport-card :: Grade -> Text\nreport-card : grade -> when grade {\n    A -> \"top of the class\"\n    B -> \"good work\"\n    C -> \"getting there\"\n    D or F -> \"need to study\"\n}\n\nshow (report-card A)"
        },
        {
            "id": "Y10Jf4jg",
            "type": "text",
            "value": "Types that provide a fixed set of possibilities are called **enumerations** (or \"enums\" for short), and each possibility is called a **variant**. Try making some of your own enums!\n\nWipple's enums have one more trick up their sleeve... go to the next section when you're ready!",
            "locked": true
        }
    ],
    "previous": { "name": "Traits", "link": "?lesson=learn/10-logic" },
    "next": { "name": "Maybe and Result", "link": "?lesson=learn/12-maybe-and-result" }
}
