[[no-std]]

use "./fp.wpl"
use "./logic.wpl"

[help "Crash the program with the provided message."]
crash :: Text -> !
crash : message -> external "runtime" "crash" message

[help "Indicates unfinished code. Crashes the program upon evaluation."]
... :: !
... : crash "not yet implemented"

[help "Represents the presence or absence of a value."]
Maybe : Value => type {
	None
	Some Value
}

use Maybe

[help "Represents the success or failure of an operation."]
Result : Success Failure => type {
	OK Success
	Error Failure
}

use Result

[help "Implement this trait to enable usage of your type in error handling."]
Try : Value Success Failure => trait (Value -> Result Success Failure)

[help "Represents the failure to find a value inside a `Maybe`."]
None-Error : type

A => instance Try (Maybe A) A None-Error : x? -> when x? {
	Some x -> OK x
	None -> Error None-Error
}

Success Failure => instance Try (Result Success Failure) Success Failure : x? -> (x? :: Result Success Failure)

try : x? ~> when ((Try :: _ -> Result _ _) x?) {
	OK x -> x
	Error e -> return (Error e)
}

-- TODO: Use higher-kinded types
Expect : Container Value => trait (Text -> Container -> Value)

Value => instance Expect (Maybe Value) Value : message -> x? -> when x? {
	Some x -> x
	None -> crash message
}

Unwrap-Message : Container => trait (Container -> Text)

Value => instance Unwrap-Message (Maybe Value) :
	just "called `unwrap` on `None`"

Success Failure => instance Unwrap-Message (Result Success Failure) :
	just "called `unwrap` on `Error`"

-- TODO: Use higher-kinded types
[help "Produces the `Some` value contained within a `Maybe`, or crashes the program with the provided message."]
expect :: Container Value where (Expect Container Value) =>
	Text -> Container -> Value
expect : Expect

-- TODO: Use higher-kinded types
[help "Produces the `Some` value contained within a `Maybe`, or crashes the program."]
unwrap :: Container Value
	where (Expect Container Value) (Unwrap-Message Container) =>
	Container -> Value
unwrap : x? -> expect (Unwrap-Message x?) x?


As : Input Output => trait (Input -> Output)

as : cast operator (x t ~> (As x :: t))

A => instance As A A : it
instance As Integer Number : n -> external "runtime" "integer-to-number" n

As? : Input Output => trait (Input -> Maybe Output)

as? : cast operator (x t ~> (As? x :: Maybe t))

A => instance As? A A : Some
instance As? Number Integer : n -> external "runtime" "number-to-integer" n

[help "Represents the default or initial value of a type."]
Default : A => trait A
instance Default Number : 0
instance Default Integer : 0 as? Integer . unwrap
instance Default Text : ""
instance Default Boolean : False
A => instance Default (Maybe A) : None
