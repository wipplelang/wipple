-- Convert the components of a value into a number used by `Dictionary` and
-- `Set` to organize their elements.
Hash : Value => trait (Value -> Number)
instance (Hash Number) : number -> number
instance (Hash Text) : text -> intrinsic "hash-text" text
instance (Hash Unit) : Unit -> Hash 0

-- A collection of unique keys associated with values.
Dictionary : Key Value => type {
  size :: Number
  entries :: List (Maybe (Key ; Value))
}

Key Value => instance (Initial (Dictionary Key Value)) : Dictionary {
  size : 0
  entries : (None ,)
}

-- Retrieve the value for a key stored in a dictionary.
entry :: Key Value where (Equal Key) (Hash Key) => Key -> (Dictionary Key Value) -> Maybe Value
entry : key -> {entries : entries} -> do {
  initial-index : (Hash key) % count entries
  index : initial-index

  repeat with-control-flow {
    when ((entries . nth index) or unreachable) {
      Some (existing-key ; value) -> if (key = existing-key) {
        Stop (Some value)
      } {
        index! : (index + 1) % count entries
        if (index = initial-index) {Stop None} {Continue Unit}
      }
      None -> Stop None
    }
  }
}

-- Add a new entry to a dictionary, returning a new dictionary.
insert-entry :: Key Value where (Equal Key) (Hash Key) => Key Value -> (Dictionary Key Value) -> Dictionary Key Value
insert-entry : key value -> {
  size : size
  entries : entries
} -> do {
  dictionary : if (size >= count entries / 2) {
    -- Double the size of the dictionary
    resized : Dictionary {
      size : 0
      entries : Sequence {Some None} . take (count entries * 2) . collect
    }

    -- Populate the new dictionary with the entries from the old dictionary
    entries . reduce resized (entry -> dictionary -> when entry {
      Some (key ; value) -> dictionary . insert-entry key value
      None -> dictionary
    })
  } {{
    size : size + 1
    entries : entries
  }}

  dictionary . set-entry key (Some value)
}

-- Remove an entry from a dictionary by its key, returning a new dictionary.
remove-entry :: Key Value where (Equal Key) (Hash Key) => Key -> (Dictionary Key Value) -> Dictionary Key Value
remove-entry : key -> {
  size : size
  entries : entries
} -> do {
  dictionary : Dictionary {
    size : if (size = 0) {0} {size - 1}
    entries : entries
  }

  dictionary . set-entry key None
}

set-entry :: Key Value where (Equal Key) (Hash Key) => Key (Maybe Value) -> (Dictionary Key Value) -> Dictionary Key Value
set-entry : key value -> {
  size : size
  entries : entries
} -> do {
  initial-index : (Hash key) % count entries
  index : initial-index

  -- Find a spot for the entry
  repeat with-control-flow {
    when ((entries . nth index) or unreachable) {
      Some (existing ; _) -> do {
        if (key = existing) {
          Stop Unit
        } {
          index! : (index + 1) % count entries
          if (index = initial-index) {Stop Unit} {Continue Unit}
        }
      }
      None -> Stop Unit
    }
  }

  new-entry : when value {
    Some value -> Some (key ; value)
    None -> None
  }

  entries : (((entries . remove-at index) or unreachable) . insert-at index new-entry)
    or unreachable

  {
    size : size
    entries : entries
  }
}

Key Value where (Equal Key) (Hash Key) => instance (From-Sequence (Key ; Value) (Dictionary Key Value)) : sequence -> do {
  dictionary : (,)
  repeat with-control-flow {
    when (next sequence) {
      Some (key ; value) -> do {
        dictionary! : dictionary . insert-entry key value
        Continue Unit
      }
      None -> Stop Unit
    }
  }

  dictionary
}

Key Value => instance (As-Sequence (Dictionary Key Value) (Key ; Value)) :
  {entries : entries} -> flatten entries

Key Value where (Equal Key) (Hash Key) => instance (Container (Dictionary Key Value) Key) :
  target -> dictionary -> (dictionary . entry target) is Some _

-- An unordered collection of unique elements.
Set : Element => type {dictionary :: Dictionary Element Unit}

Element => instance (Initial (Set Element)) : {dictionary : Initial}

-- Add a new element to a set, returning a new set.
insert :: Element where (Equal Element) (Hash Element) => Element -> (Set Element) -> Set Element
insert : element -> {dictionary : dictionary} -> {dictionary : dictionary . insert-entry element Unit}

-- Remove an element from a set, returning a new set.
remove :: Element where (Equal Element) (Hash Element) => Element -> (Set Element) -> Set Element
remove : element -> {dictionary : dictionary} -> {dictionary : dictionary . remove-entry element}

Element where (Equal Element) (Hash Element) => instance (From-Sequence Element (Set Element)) :
  sequence -> {dictionary : sequence . transform (key -> (key ; Unit)) . collect}

Element => instance (As-Sequence (Set Element) Element) :
  {dictionary : dictionary} -> dictionary . transform ((key ; Unit) -> key)

Element where (Equal Element) (Hash Element) => instance (Container (Set Element) Element) :
  target -> {dictionary : dictionary} -> (dictionary . entry target) is Some Unit
